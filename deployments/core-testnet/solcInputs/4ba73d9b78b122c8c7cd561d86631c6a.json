{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/ETHStreamInterface.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\nimport {IStream} from \"./interfaces/IStream.sol\";\nimport {StreamStructs} from \"./libraries/StreamStructs.sol\";\n\ncontract ETHStreamInterface is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Custom Errors\n    error InvalidTokenAddress();\n    error ArrayLengthMismatch();\n    error InvalidStopTime();\n    error TransferFailed();\n    error UnauthorizedReceiver();\n    error FallbackNotAllowed();\n\n    IWETH internal immutable WETH;\n    IStream internal immutable STREAM;\n\n    constructor(address _weth, IStream _stream) ReentrancyGuard() Ownable() {\n        WETH = IWETH(_weth);    \n        STREAM = _stream;\n        IWETH(_weth).approve(address(_stream), type(uint256).max);\n    }\n\n    function createMultipleStreamsETH(\n        StreamStructs.initializeStreamData[] calldata params\n    ) external payable nonReentrant {\n        (uint256 totalDeposit, uint256 totalAutoWithdrawFee) = _processMultipleStreamCreation(params);\n        _refundExcess(totalDeposit + totalAutoWithdrawFee);\n    }\n\n    function initializeStreamETH(\n        StreamStructs.initializeStreamData calldata params\n    ) external payable nonReentrant {\n        if (params.tokenAddress != address(0x00)) revert InvalidTokenAddress();\n        \n        uint256 autoWithdrawFee = _calculateAutoWithdrawFee(params);\n        \n        WETH.deposit{value: params.deposit}();\n        \n        StreamStructs.initializeStreamData memory streamParams = _buildStreamParams(params);\n        STREAM.initializeStream{value: autoWithdrawFee}(streamParams);\n        \n        _handleCliffPayment(params);\n        _refundExcess(params.deposit + autoWithdrawFee);\n    }\n\n    function prolongMultipleStreamsETH(\n        uint256[] calldata streamIds,\n        uint256[] calldata newStopTimes\n    ) external payable nonReentrant {\n        if (streamIds.length != newStopTimes.length) revert ArrayLengthMismatch();\n\n        (uint256 totalDeposit, uint256 totalAutoWithdrawFee) = _processMultipleStreamExtension(streamIds, newStopTimes);\n        _refundExcess(totalDeposit + totalAutoWithdrawFee);\n    }\n\n    function prolongStreamETH(\n        uint256 streamId,\n        uint256 newStopTime\n    ) external payable nonReentrant {\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\n        (uint256 newDeposit, uint256 autoWithdrawFee) = _calculateExtensionCosts(stream, newStopTime);\n        \n        WETH.deposit{value: newDeposit}();\n        STREAM.ExtendFlow{value: autoWithdrawFee}(streamId, newStopTime);\n        \n        _refundExcess(newDeposit + autoWithdrawFee);\n    }\n\n    function claimFromMultipleStreamsETH(\n        uint256[] calldata streamIds\n    ) external nonReentrant {\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n        address feeRecipient = STREAM.feeRecipient();\n        \n        for (uint256 i; i < streamIds.length; ++i) {\n            _processClaim(streamIds[i], feeRate, feeRecipient);\n        }\n    }\n\n    function claimFromStreamETH(uint256 streamId) external nonReentrant {\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n        address feeRecipient = STREAM.feeRecipient();\n        _processClaim(streamId, feeRate, feeRecipient);\n    }\n\n    function terminateMultipleStreamsETH(\n        uint256[] calldata streamIds\n    ) external nonReentrant {\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n        address feeRecipient = STREAM.feeRecipient();\n        \n        for (uint256 i; i < streamIds.length; ++i) {\n            _processTermination(streamIds[i], feeRate, feeRecipient);\n        }\n    }\n\n    function terminateStreamETH(uint256 streamId) external nonReentrant {\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n        address feeRecipient = STREAM.feeRecipient();\n        _processTermination(streamId, feeRate, feeRecipient);\n    }\n\n    function haltMultipleStreamsETH(\n        uint256[] calldata streamIds\n    ) external nonReentrant {\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n        address feeRecipient = STREAM.feeRecipient();\n        \n        for (uint256 i; i < streamIds.length; ++i) {\n            _processHalt(streamIds[i], feeRate, feeRecipient);\n        }\n    }\n\n    function haltStreamETH(uint256 streamId) external nonReentrant {\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n        address feeRecipient = STREAM.feeRecipient();\n        _processHalt(streamId, feeRate, feeRecipient);\n    }\n\n    // Internal helper functions\n    function _processMultipleStreamCreation(\n        StreamStructs.initializeStreamData[] calldata params\n    ) internal returns (uint256 totalDeposit, uint256 totalAutoWithdrawFee) {\n        uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n        address feeRecipient = STREAM.feeRecipient();\n        \n        for (uint256 i; i < params.length; ++i) {\n            StreamStructs.initializeStreamData calldata currentParams = params[i];\n            if (currentParams.tokenAddress != address(0x00)) revert InvalidTokenAddress();\n            \n            uint256 autoWithdrawFee;\n            if (currentParams.autoWithdraw) {\n                autoWithdrawFee = autoWithdrawFeeForOnce * \n                    ((currentParams.stopTime - currentParams.startTime) / \n                     currentParams.autoWithdrawInterval + 1);\n                totalAutoWithdrawFee += autoWithdrawFee;\n            }\n            \n            totalDeposit += currentParams.deposit;\n            WETH.deposit{value: currentParams.deposit}();\n            \n            StreamStructs.initializeStreamData memory streamParams = _buildStreamParams(currentParams);\n            STREAM.initializeStream{value: autoWithdrawFee}(streamParams);\n            \n            if (currentParams.cliffTime <= block.timestamp && currentParams.cliffAmount > 0) {\n                uint256 fee = (currentParams.cliffAmount * feeRate) / 10000;\n                WETH.withdraw(currentParams.cliffAmount);\n                _transferETH(currentParams.recipient, currentParams.cliffAmount - fee);\n                _transferETH(feeRecipient, fee);\n            }\n        }\n    }\n\n    function _processMultipleStreamExtension(\n        uint256[] calldata streamIds,\n        uint256[] calldata newStopTimes\n    ) internal returns (uint256 totalDeposit, uint256 totalAutoWithdrawFee) {\n        uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\n        \n        for (uint256 i; i < streamIds.length; ++i) {\n            StreamStructs.StreamData memory stream = STREAM.getStream(streamIds[i]);\n            uint256 duration = newStopTimes[i] - stream.stopTime;\n            uint256 delta = duration / stream.interval;\n            \n            if (delta * stream.interval != duration) revert InvalidStopTime();\n            \n            uint256 newDeposit = delta * stream.ratePerInterval;\n            totalDeposit += newDeposit;\n            \n            uint256 autoWithdrawFee;\n            if (stream.autoWithdraw) {\n                autoWithdrawFee = autoWithdrawFeeForOnce * \n                    (duration / stream.autoWithdrawInterval + 1);\n                totalAutoWithdrawFee += autoWithdrawFee;\n            }\n            \n            WETH.deposit{value: newDeposit}();\n            STREAM.ExtendFlow{value: autoWithdrawFee}(streamIds[i], newStopTimes[i]);\n        }\n    }\n\n    function _calculateExtensionCosts(\n        StreamStructs.StreamData memory stream,\n        uint256 newStopTime\n    ) internal view returns (uint256 newDeposit, uint256 autoWithdrawFee) {\n        uint256 duration = newStopTime - stream.stopTime;\n        uint256 delta = duration / stream.interval;\n        \n        if (delta * stream.interval != duration) revert InvalidStopTime();\n        \n        newDeposit = delta * stream.ratePerInterval;\n        \n        if (stream.autoWithdraw) {\n            uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\n            autoWithdrawFee = autoWithdrawFeeForOnce * \n                (duration / stream.autoWithdrawInterval + 1);\n        }\n    }\n\n    function _processClaim(uint256 streamId, uint256 feeRate, address feeRecipient) internal {\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\n        uint256 balance = STREAM.balanceOf(streamId, stream.recipient);\n        \n        STREAM.WithdrawFromFlow(streamId);\n        if (balance > 0) {\n            uint256 fee = (balance * feeRate) / 10000;\n            WETH.withdraw(balance);\n            _transferETH(stream.recipient, balance - fee);\n            _transferETH(feeRecipient, fee);\n        }\n    }\n\n    function _processTermination(uint256 streamId, uint256 feeRate, address feeRecipient) internal {\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\n        uint256 senderBalance = STREAM.balanceOf(streamId, stream.sender);\n        uint256 recipientBalance = STREAM.balanceOf(streamId, stream.recipient);\n        \n        STREAM.closeStream(streamId);\n        WETH.withdraw(senderBalance + recipientBalance);\n        \n        if (senderBalance > 0) {\n            _transferETH(stream.sender, senderBalance);\n        }\n        if (recipientBalance > 0) {\n            uint256 fee = (recipientBalance * feeRate) / 10000;\n            _transferETH(stream.recipient, recipientBalance - fee);\n            _transferETH(feeRecipient, fee);\n        }\n    }\n\n    function _processHalt(uint256 streamId, uint256 feeRate, address feeRecipient) internal {\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\n        uint256 balance = STREAM.balanceOf(streamId, stream.recipient);\n        \n        STREAM.pauseStream(streamId);\n        if (balance > 0) {\n            uint256 fee = (balance * feeRate) / 10000;\n            WETH.withdraw(balance);\n            _transferETH(stream.recipient, balance - fee);\n            _transferETH(feeRecipient, fee);\n        }\n    }\n\n    function _calculateAutoWithdrawFee(\n        StreamStructs.initializeStreamData calldata params\n    ) internal view returns (uint256) {\n        if (!params.autoWithdraw) return 0;\n        \n        uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\n        return autoWithdrawFeeForOnce * \n            ((params.stopTime - params.startTime) / params.autoWithdrawInterval + 1);\n    }\n\n    function _buildStreamParams(\n        StreamStructs.initializeStreamData calldata params\n    ) internal view returns (StreamStructs.initializeStreamData memory) {\n        return StreamStructs.initializeStreamData({\n            sender: params.sender,\n            recipient: params.recipient,\n            deposit: params.deposit,\n            tokenAddress: address(WETH),\n            startTime: params.startTime,\n            stopTime: params.stopTime,\n            interval: params.interval,\n            cliffAmount: params.cliffAmount,\n            cliffTime: params.cliffTime,\n            autoWithdrawInterval: params.autoWithdrawInterval,\n            autoWithdraw: params.autoWithdraw,\n            pauseable: params.pauseable,\n            closeable: params.closeable,\n            recipientModifiable: params.recipientModifiable\n        });\n    }\n\n    function _handleCliffPayment(StreamStructs.initializeStreamData calldata params) internal {\n        if (params.cliffTime <= block.timestamp && params.cliffAmount > 0) {\n            uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\n            address feeRecipient = STREAM.feeRecipient();\n            uint256 fee = (params.cliffAmount * feeRate) / 10000;\n            WETH.withdraw(params.cliffAmount);\n            _transferETH(params.recipient, params.cliffAmount - fee);\n            _transferETH(feeRecipient, fee);\n        }\n    }\n\n    function _refundExcess(uint256 totalUsed) internal {\n        if (msg.value > totalUsed) {\n            _transferETH(msg.sender, msg.value - totalUsed);\n        }\n    }\n\n    function _transferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        if (!success) revert TransferFailed();\n    }\n\n    // Emergency functions\n    function emergencyTokenTransfer(\n        address token,\n        address to,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    function emergencyEtherTransfer(\n        address to,\n        uint256 amount\n    ) external onlyOwner {\n        _transferETH(to, amount);\n    }\n\n    // View functions\n    function getWETHAddress() external view returns (address) {\n        return address(WETH);\n    }\n\n    receive() external payable {\n        if (msg.sender != address(WETH) && msg.sender != address(STREAM)) {\n            revert UnauthorizedReceiver();\n        }\n    }\n\n    fallback() external payable {\n        revert FallbackNotAllowed();\n    }\n}"
    },
    "contracts/interfaces/IStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {StreamStructs} from \"../libraries/StreamStructs.sol\";\n\ninterface IStream {\n    function tokenFeeRate(address tokenAddress) external view returns (uint256);\n    \n    function autoWithdrawFeeForOnce() external view returns (uint256);\n    \n    function autoWithdrawAccount() external view returns (address);\n    \n    function feeRecipient() external view returns (address);\n    \n    function getStream(uint256 streamId) external view returns (StreamStructs.StreamData memory);\n    \n    function balanceOf(uint256 streamId, address account) external view returns (uint256 balance);\n    \n    function initializeStream(StreamStructs.initializeStreamData calldata streamParams) external payable;\n    \n    function ExtendFlow(uint256 streamId, uint256 newStopTime) external payable;\n    \n    function WithdrawFromFlow(uint256 streamId) external;\n    \n    function closeStream(uint256 streamId) external;\n    \n    function pauseStream(uint256 streamId) external;\n    \n    function resumeStream(uint256 streamId) external;\n    \n    function setNewRecipient(uint256 streamId, address newRecipient) external;\n}"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 wad\n  ) external returns (bool);\n}\n"
    },
    "contracts/libraries/CreateLogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {StreamStructs} from \"./StreamStructs.sol\";\n\nlibrary CreateLogic {\n    using SafeERC20 for IERC20;\n\n    // Custom Errors\n    error ZeroAddressRecipient();\n    error StreamToContract();\n    error StreamToSelf();\n    error ZeroDeposit();\n    error InvalidStartTime();\n    error InvalidStopTime();\n    error InvalidDuration();\n    error InvalidDepositAmount();\n    error InsufficientAutoWithdrawFee();\n\n    /**\n     * @notice Emits when a stream is successfully created.\n     */\n    event initializeStream(\n        uint256 indexed streamId,\n        address indexed sender,\n        address indexed recipient,\n        uint256 deposit,\n        address tokenAddress,\n        uint256 startTime,\n        uint256 stopTime,\n        uint256 interval,\n        uint256 cliffAmount,\n        uint256 cliffTime,\n        uint256 autoWithdrawInterval,\n        bool autoWithdraw,\n        uint8 pauseable,\n        uint8 closeable,\n        uint8 recipientModifiable\n    );\n\n    function create(\n        uint256 streamId,\n        uint256 senderValue,\n        StreamStructs.GlobalConfig memory globalConfig,\n        StreamStructs.initializeStreamData calldata createParams,\n        mapping(uint256 => StreamStructs.StreamData) storage streams\n    ) internal returns (uint256 autoWithdrawFee) {\n        _validateCreateParams(createParams);\n        uint256 ratePerInterval = _computeRatePerInterval(createParams);\n\n        streams[streamId] = _buildStreamStruct(createParams, ratePerInterval);\n        \n        if (msg.sender == globalConfig.gateway) {\n            streams[streamId].onBehalfOf = globalConfig.gateway;\n        }\n\n        IERC20(createParams.tokenAddress).safeTransferFrom(\n            msg.sender, \n            address(this), \n            createParams.deposit\n        );\n\n        autoWithdrawFee = _handleAutoWithdrawFee(\n            createParams, \n            globalConfig, \n            senderValue\n        );\n\n        _processCliffPayment(streamId, createParams, globalConfig, streams);\n        _emitStreamCreatedEvent(streamId, streams[streamId]);\n    }\n\n    function _validateCreateParams(\n        StreamStructs.initializeStreamData memory params\n    ) private view {\n        if (params.recipient == address(0x00)) revert ZeroAddressRecipient();\n        if (params.recipient == address(this)) revert StreamToContract();\n        if (params.recipient == params.sender) revert StreamToSelf();\n        if (params.deposit == 0) revert ZeroDeposit();\n        if (params.startTime < block.timestamp) revert InvalidStartTime();\n        if (params.stopTime <= params.startTime) revert InvalidStopTime();\n    }\n\n    function _computeRatePerInterval(\n        StreamStructs.initializeStreamData memory params\n    ) private pure returns (uint256 ratePerInterval) {\n        uint256 duration = params.stopTime - params.startTime;\n        uint256 delta = duration / params.interval;\n        \n        if (delta * params.interval != duration) revert InvalidDuration();\n\n        uint256 streamableAmount = params.deposit - params.cliffAmount;\n        ratePerInterval = streamableAmount / delta;\n        \n        if (ratePerInterval * delta != streamableAmount) revert InvalidDepositAmount();\n    }\n\n    function _buildStreamStruct(\n        StreamStructs.initializeStreamData calldata params,\n        uint256 ratePerInterval\n    ) private view returns (StreamStructs.StreamData memory) {\n        return StreamStructs.StreamData({\n            onBehalfOf: address(0x00),\n            sender: params.sender,\n            recipient: params.recipient,\n            deposit: params.deposit,\n            tokenAddress: params.tokenAddress,\n            startTime: params.startTime,\n            stopTime: params.stopTime,\n            interval: params.interval,\n            ratePerInterval: ratePerInterval,\n            remainingBalance: params.deposit,\n            lastWithdrawTime: params.startTime,\n            createdAt: block.timestamp,\n            autoWithdrawInterval: params.autoWithdrawInterval,\n            autoWithdraw: params.autoWithdraw,\n            closed: false,\n            isActive: true,\n            cliffData: StreamStructs.CliffData({\n                cliffAmount: params.cliffAmount,\n                cliffTime: params.cliffTime,\n                cliffClaimed: false\n            }),\n            permissionData: StreamStructs.PermissionData({\n                pauseable: params.pauseable,\n                closeable: params.closeable,\n                recipientModifiable: params.recipientModifiable\n            }),\n            pauseData: StreamStructs.PauseData({\n                pausedAt: 0,\n                totalPausedTime: 0,\n                pausedBy: address(0x00),\n                isPaused: false\n            })\n        });\n    }\n\n    function _handleAutoWithdrawFee(\n        StreamStructs.initializeStreamData calldata params,\n        StreamStructs.GlobalConfig memory globalConfig,\n        uint256 senderValue\n    ) private returns (uint256 autoWithdrawFee) {\n        if (!params.autoWithdraw) return 0;\n\n        uint256 duration = params.stopTime - params.startTime;\n        uint256 intervals = duration / params.autoWithdrawInterval + 1;\n        autoWithdrawFee = globalConfig.autoWithdrawFeeForOnce * intervals;\n        \n        if (senderValue < autoWithdrawFee) revert InsufficientAutoWithdrawFee();\n        \n        payable(globalConfig.autoWithdrawAccount).transfer(autoWithdrawFee);\n    }\n\n    function _processCliffPayment(\n        uint256 streamId,\n        StreamStructs.initializeStreamData calldata params,\n        StreamStructs.GlobalConfig memory globalConfig,\n        mapping(uint256 => StreamStructs.StreamData) storage streams\n    ) private {\n        if (params.cliffAmount == 0) {\n            streams[streamId].cliffData.cliffClaimed = true;\n            return;\n        }\n\n        if (params.cliffTime > block.timestamp) return;\n\n        if (msg.sender == globalConfig.gateway) {\n            IERC20(params.tokenAddress).safeTransfer(msg.sender, params.cliffAmount);\n        } else {\n            _distributeCliffWithFee(params, globalConfig);\n        }\n\n        streams[streamId].cliffData.cliffClaimed = true;\n        streams[streamId].remainingBalance -= params.cliffAmount;\n    }\n\n    function _distributeCliffWithFee(\n        StreamStructs.initializeStreamData calldata params,\n        StreamStructs.GlobalConfig memory globalConfig\n    ) private {\n        uint256 feeAmount = params.cliffAmount * globalConfig.tokenFeeRate / 10000;\n        uint256 recipientAmount = params.cliffAmount - feeAmount;\n        \n        IERC20(params.tokenAddress).safeTransfer(globalConfig.feeRecipient, feeAmount);\n        IERC20(params.tokenAddress).safeTransfer(params.recipient, recipientAmount);\n    }\n\n    function _emitStreamCreatedEvent(\n        uint256 streamId,\n        StreamStructs.StreamData memory stream\n    ) private {\n        emit initializeStream(\n            streamId, \n            stream.sender, \n            stream.recipient, \n            stream.deposit, \n            stream.tokenAddress, \n            stream.startTime, \n            stream.stopTime, \n            stream.interval,\n            stream.cliffData.cliffAmount,\n            stream.cliffData.cliffTime,\n            stream.autoWithdrawInterval,\n            stream.autoWithdraw,\n            uint8(stream.permissionData.pauseable),\n            uint8(stream.permissionData.closeable),\n            uint8(stream.permissionData.recipientModifiable)\n        );\n    }\n\n    // Public functions for backward compatibility (if needed)\n    function verifyinitializeStreamParams(\n        StreamStructs.initializeStreamData memory createParams\n    ) internal view {\n        _validateCreateParams(createParams);\n    }\n\n    function calculateRatePerInterval(\n        StreamStructs.initializeStreamData memory createParams\n    ) internal pure returns (uint256) {\n        return _computeRatePerInterval(createParams);\n    }\n\n    function emitinitializeStreamEvent(\n        uint256 streamId,\n        StreamStructs.StreamData memory stream\n    ) internal {\n        _emitStreamCreatedEvent(streamId, stream);\n    }\n}"
    },
    "contracts/libraries/ExtendLogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {StreamStructs} from \"./StreamStructs.sol\";\n\nlibrary ExtendLogic {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Emits when a stream is successfully extended.\n     */\n    event ExtendFlow(uint256 indexed streamId, address indexed operator, uint256 stopTime, uint256 deposit);\n\n    // Custom Errors for better gas efficiency and clearer error handling\n    error InvalidStopTime();\n    error StreamPaused();\n    error StreamClosed();\n    error UnauthorizedExtension();\n    error InvalidDuration();\n    error InsufficientAutoWithdrawFee();\n\n    function ExtendFlow(\n        uint256 streamId, \n        uint256 stopTime,\n        uint256 senderValue,\n        StreamStructs.GlobalConfig memory globalConfig,\n        StreamStructs.StreamData storage stream\n    )\n        internal\n        returns (uint256 autoWithdrawFee)\n    {\n        // Validate extend conditions\n        if (stopTime <= stream.stopTime) revert InvalidStopTime();\n        if (stream.pauseData.isPaused) revert StreamPaused();\n        if (stream.closed) revert StreamClosed();\n        \n        // Check authorization - removed WETH condition as per pattern\n        if (msg.sender != stream.sender && msg.sender != stream.onBehalfOf) {\n            revert UnauthorizedExtension();\n        }\n\n        uint256 duration = stopTime - stream.stopTime;\n        uint256 delta = duration / stream.interval;\n        if (delta * stream.interval != duration) revert InvalidDuration();\n\n        /* auto withdraw fee */\n        if (stream.autoWithdraw) {\n            autoWithdrawFee = globalConfig.autoWithdrawFeeForOnce * (duration / stream.autoWithdrawInterval + 1);\n            if (senderValue < autoWithdrawFee) revert InsufficientAutoWithdrawFee();\n            payable(globalConfig.autoWithdrawAccount).transfer(autoWithdrawFee);\n        }\n\n        uint256 newDeposit = delta * stream.ratePerInterval;\n\n        stream.stopTime = stopTime;\n        stream.deposit = stream.deposit + newDeposit;\n        stream.remainingBalance = stream.remainingBalance + newDeposit;\n\n        IERC20(stream.tokenAddress).safeTransferFrom(msg.sender, address(this), newDeposit);\n\n        emit ExtendFlow(streamId, msg.sender, stopTime, newDeposit);\n    }\n\n    // Alternative version with require statements and meaningful messages\n    function ExtendFlowWithRequires(\n        uint256 streamId, \n        uint256 stopTime,\n        uint256 senderValue,\n        StreamStructs.GlobalConfig memory globalConfig,\n        StreamStructs.StreamData storage stream\n    )\n        internal\n        returns (uint256 autoWithdrawFee)\n    {\n        require(stopTime > stream.stopTime, \"ExtendLogic: new stop time must be after current stop time\");\n        require(!stream.pauseData.isPaused, \"ExtendLogic: cannot extend paused stream\");\n        require(!stream.closed, \"ExtendLogic: cannot extend closed stream\");\n        require(\n            msg.sender == stream.sender || msg.sender == stream.onBehalfOf, \n            \"ExtendLogic: only sender or authorized party can extend stream\"\n        );\n\n        uint256 duration = stopTime - stream.stopTime;\n        uint256 delta = duration / stream.interval;\n        require(\n            delta * stream.interval == duration, \n            \"ExtendLogic: extension duration must be multiple of stream interval\"\n        );\n\n        /* auto withdraw fee */\n        if (stream.autoWithdraw) {\n            autoWithdrawFee = globalConfig.autoWithdrawFeeForOnce * (duration / stream.autoWithdrawInterval + 1);\n            require(\n                senderValue >= autoWithdrawFee, \n                \"ExtendLogic: insufficient value provided for auto-withdraw fees\"\n            );\n            payable(globalConfig.autoWithdrawAccount).transfer(autoWithdrawFee);\n        }\n\n        uint256 newDeposit = delta * stream.ratePerInterval;\n\n        stream.stopTime = stopTime;\n        stream.deposit = stream.deposit + newDeposit;\n        stream.remainingBalance = stream.remainingBalance + newDeposit;\n\n        IERC20(stream.tokenAddress).safeTransferFrom(msg.sender, address(this), newDeposit);\n\n        emit ExtendFlow(streamId, msg.sender, stopTime, newDeposit);\n    }\n\n    // Backward compatibility function\n    function extend(\n        uint256 streamId, \n        uint256 stopTime,\n        uint256 senderValue,\n        StreamStructs.GlobalConfig memory globalConfig,\n        StreamStructs.StreamData storage stream\n    )\n        internal\n        returns (uint256 autoWithdrawFee)\n    {\n        return ExtendFlow(streamId, stopTime, senderValue, globalConfig, stream);\n    }\n}"
    },
    "contracts/libraries/StreamStructs.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nlibrary StreamStructs {\n\n    enum Permission {\n        None,      // No permissions\n        Sender,\n        Recipient,\n        Both\n    }\n\n    struct StreamData {\n        address onBehalfOf;\n        address sender;\n        address recipient;\n        uint256 deposit;\n        address tokenAddress;\n        uint256 startTime;\n        uint256 stopTime;\n        uint256 interval;\n        uint256 ratePerInterval;\n        uint256 remainingBalance;\n        uint256 lastWithdrawTime;\n        uint256 createdAt;\n        uint256 autoWithdrawInterval;\n        bool autoWithdraw;\n        bool closed;\n        bool isActive;\n        CliffData cliffData;\n        PermissionData permissionData;\n        PauseData pauseData;\n    }\n\n    struct CliffData {\n        uint256 cliffAmount;\n        uint256 cliffTime;\n        bool cliffClaimed;\n    }\n\n    struct PermissionData {\n        Permission pauseable;\n        Permission closeable;\n        Permission recipientModifiable;\n    }\n\n    struct PauseData {\n        uint256 pausedAt;\n        uint256 totalPausedTime;\n        address pausedBy;\n        bool isPaused;\n    }\n\n    struct GlobalConfig {\n        address weth;\n        address gateway;\n        address feeRecipient;\n        address autoWithdrawAccount;\n        uint256 autoWithdrawFeeForOnce;\n        uint256 tokenFeeRate;\n    }\n\n    struct initializeStreamData {\n        address sender;\n        address recipient;\n        uint256 deposit;\n        address tokenAddress;\n        uint256 startTime;\n        uint256 stopTime;\n        uint256 interval;\n        uint256 cliffAmount;\n        uint256 cliffTime;\n        uint256 autoWithdrawInterval;\n        bool autoWithdraw;\n        Permission pauseable;\n        Permission closeable;\n        Permission recipientModifiable;\n    }\n}"
    },
    "contracts/libraries/WithdrawLogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {StreamStructs} from \"./StreamStructs.sol\";\n\nlibrary WithdrawLogic {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\n     */\n    event WithdrawFromFlow(uint256 indexed streamId, address indexed operator, uint256 recipientBalance);\n\n    function processWithdrawal(\n        uint256 streamId,\n        uint256 delta,\n        uint256 balance,\n        StreamStructs.GlobalConfig memory globalConfig,\n        StreamStructs.StreamData storage stream\n    )\n        internal\n    {\n        require(stream.pauseData.isPaused == false, \"vesting  is paused\");\n        require(stream.closed == false, \"vesting is closed\");\n\n        stream.remainingBalance = stream.remainingBalance - balance;\n        if (delta > 0) {\n            stream.lastWithdrawTime += stream.interval * delta + stream.pauseData.totalPausedTime;\n            stream.pauseData.totalPausedTime = 0;\n        }\n\n\n        if (msg.sender == stream.onBehalfOf) {\n            IERC20(stream.tokenAddress).safeTransfer(stream.onBehalfOf, balance);\n        } else {\n            uint256 fee = balance * globalConfig.tokenFeeRate / 10000;\n            IERC20(stream.tokenAddress).safeTransfer(globalConfig.feeRecipient, fee);\n            IERC20(stream.tokenAddress).safeTransfer(stream.recipient, balance - fee);\n        }\n\n        /* cliff */\n        if (stream.cliffData.cliffClaimed == false && stream.cliffData.cliffTime <= block.timestamp) {\n            stream.cliffData.cliffClaimed = true;\n        }\n\n        emit WithdrawFromFlow(streamId, msg.sender, balance);\n    }\n\n    // Backward compatibility function (if needed)\n    function withdraw(\n        uint256 streamId,\n        uint256 delta,\n        uint256 balance,\n        StreamStructs.GlobalConfig memory globalConfig,\n        StreamStructs.StreamData storage stream\n    )\n        internal\n    {\n        processWithdrawal(streamId, delta, balance, globalConfig, stream);\n    }\n}"
    },
    "contracts/mocks/WETH9.sol": {
      "content": "// SPDX-License-Identifier: gpl-3.0\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\ncontract WETH9 {\n    string public name = \"Wrapped Ether\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint256 wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint256 wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(balanceOf[src] >= wad);\n\n        if (\n            src != msg.sender && allowance[src][msg.sender] != type(uint256).max\n        ) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/\n"
    },
    "contracts/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n\ncontract MockUSDC  is ERC20, ERC20Permit {\n    constructor() ERC20(\"Mock USDC\", \"MockUSDC\") ERC20Permit(\"MockUSDC\") {\n        _mint(_msgSender(), 1_000_000_000 * 1e18);\n    }\n}\n\n"
    },
    "contracts/Stream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IStream} from \"./interfaces/IStream.sol\";\nimport {StreamStructs} from \"./libraries/StreamStructs.sol\";\nimport {CreateLogic} from \"./libraries/CreateLogic.sol\";\nimport {WithdrawLogic} from \"./libraries/WithdrawLogic.sol\";\nimport {ExtendLogic} from \"./libraries/ExtendLogic.sol\";\n\n/**\n * @title PaymentStream Contract\n * @dev Implementation of streaming payment functionality with pause/resume capabilities\n */\ncontract Stream is IStream, ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    /*//////////////////////////////////////////////////////////////\n                            STATE VARIABLES\n    //////////////////////////////////////////////////////////////*/\n    \n    address public WETH;\n    address public GATEWAY;\n\n    /// @dev Incremental counter for generating unique stream identifiers\n    uint256 public nextStreamId;\n\n    // Private state variables for fee management\n    address private _protocolFeeCollector;\n    address private _automatedWithdrawWallet;\n    uint256 private _singleWithdrawFee;\n\n    // Token whitelist and fee configuration\n    mapping(address => bool) private _approvedTokens;\n    mapping(address => uint256) private _tokenProtocolFee;\n\n    /// @dev Core stream data storage mapped by stream ID\n    mapping(uint256 => StreamStructs.StreamData) private _streamRegistry;\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n    \n    /// @dev Validates that the stream ID corresponds to an existing stream\n    modifier onlyValidStream(uint256 streamId) {\n        require(_streamRegistry[streamId].isActive, \"stream does not exist\");\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when a stream is terminated and remaining funds are distributed\n    event StreamClosed(\n        uint256 indexed streamId,\n        address indexed operator,\n        uint256 senderBalance,\n        uint256 recipientBalance\n    );\n\n    /// @notice Emitted when stream payments are temporarily halted\n    event StreamPaused(\n        uint256 indexed streamId,\n        address indexed operator,\n        uint256 recipientBalance\n    );\n\n    /// @notice Emitted when a paused stream is reactivated\n    event StreamResumed(\n        uint256 indexed streamId,\n        address indexed operator,\n        uint256 duration\n    );\n\n    /// @notice Emitted when stream beneficiary is updated\n    event RecipientUpdated(\n        uint256 indexed streamId,\n        address indexed operator,\n        address indexed newRecipient\n    );\n\n    /// @notice Emitted when a new token is whitelisted for streaming\n    event TokenWhitelisted(address indexed tokenAddress, uint256 feeRate);\n\n    /*//////////////////////////////////////////////////////////////\n                            CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        address owner_,\n        address weth_,\n        address protocolFeeCollector_, \n        address automatedWithdrawWallet_,\n        uint256 singleWithdrawFee_\n    ) Ownable() ReentrancyGuard() {\n        _transferOwnership(owner_);\n        WETH = weth_;\n        _protocolFeeCollector = protocolFeeCollector_;\n        _automatedWithdrawWallet = automatedWithdrawWallet_;\n        _singleWithdrawFee = singleWithdrawFee_;\n        nextStreamId = 100000;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            VIEW FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns the protocol fee rate for a specific token\n    function tokenFeeRate(address tokenAddress) \n        external \n        view \n        override \n        returns (uint256) \n    {\n        require(_approvedTokens[tokenAddress], \"token not registered\");\n        return _tokenProtocolFee[tokenAddress];\n    }\n\n    /// @notice Returns the fee charged for automated withdrawals\n    function autoWithdrawFeeForOnce() \n        external \n        view \n        override \n        returns (uint256) \n    {\n        return _singleWithdrawFee;\n    }\n\n    /// @notice Returns the wallet address for automated withdrawals\n    function autoWithdrawAccount() \n        external \n        view \n        override \n        returns (address) \n    {\n        return _automatedWithdrawWallet;\n    }\n\n    /// @notice Returns the protocol fee collector address\n    function feeRecipient() \n        external \n        view \n        override \n        returns (address) \n    {\n        return _protocolFeeCollector;\n    }\n\n    /// @notice Retrieves complete stream information by ID\n    /// @param streamId The unique identifier of the stream\n    /// @return Complete stream data structure\n    function getStream(uint256 streamId)\n        external\n        view\n        override\n        onlyValidStream(streamId)\n        returns (StreamStructs.StreamData memory)\n    {\n        return _streamRegistry[streamId];\n    }\n\n    /// @notice Calculates elapsed time intervals for stream payments\n    /// @dev Returns 0 if current time is before stream start + pause time\n    /// @param streamId The stream identifier to query\n    /// @return delta Number of payment intervals elapsed\n    function deltaOf(uint256 streamId) \n        public \n        view \n        onlyValidStream(streamId) \n        returns (uint256 delta) \n    {\n        StreamStructs.StreamData memory streamData = _streamRegistry[streamId];\n        \n        uint256 effectiveStartTime = streamData.lastWithdrawTime + streamData.pauseData.totalPausedTime;\n        if (block.timestamp < effectiveStartTime) {\n            return 0;\n        }\n\n        uint256 endTime = block.timestamp > streamData.stopTime \n            ? streamData.stopTime \n            : block.timestamp;\n        \n        return (endTime - streamData.lastWithdrawTime - streamData.pauseData.totalPausedTime) / streamData.interval;\n    }\n\n    /// @notice Calculates available balance for withdrawal by a specific address\n    /// @param streamId The stream identifier\n    /// @param account The address to check balance for\n    /// @return balance Available funds for the specified account\n    function balanceOf(uint256 streamId, address account)\n        public\n        view\n        override\n        onlyValidStream(streamId)\n        returns (uint256 balance)\n    {\n        StreamStructs.StreamData memory streamData = _streamRegistry[streamId];\n\n        uint256 intervalsPassed = deltaOf(streamId);\n        uint256 streamedAmount = intervalsPassed * streamData.ratePerInterval;\n        \n        // Add cliff amount if applicable\n        if (!streamData.cliffData.cliffClaimed && \n            streamData.cliffData.cliffTime <= block.timestamp) {\n            streamedAmount += streamData.cliffData.cliffAmount;\n        }\n\n        if (account == streamData.recipient) {\n            return streamedAmount;\n        } else if (account == streamData.sender) {\n            return streamData.remainingBalance - streamedAmount;\n        }\n        \n        return 0;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        STREAM MANAGEMENT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Creates multiple streams in a single transaction\n    function batchinitializeStream(StreamStructs.initializeStreamData[] calldata streamParams) \n        external \n        payable \n        nonReentrant \n    {\n        uint256 remainingValue = msg.value;\n        \n        for (uint256 i = 0; i < streamParams.length; i++) {\n            require(_approvedTokens[streamParams[i].tokenAddress], \"token not registered\");\n\n            uint256 withdrawFeeUsed = CreateLogic.create(\n                nextStreamId,\n                remainingValue,\n                StreamStructs.GlobalConfig({\n                    weth: WETH,\n                    gateway: GATEWAY,\n                    feeRecipient: _protocolFeeCollector,\n                    autoWithdrawAccount: _automatedWithdrawWallet,\n                    autoWithdrawFeeForOnce: _singleWithdrawFee,\n                    tokenFeeRate: _tokenProtocolFee[streamParams[i].tokenAddress]\n                }),\n                streamParams[i],\n                _streamRegistry\n            );\n\n            remainingValue -= withdrawFeeUsed;\n            nextStreamId = nextStreamId + 1;\n        }\n\n        // Refund unused ETH\n        payable(msg.sender).transfer(remainingValue);\n    }\n\n    /// @notice Creates a single payment stream\n    function initializeStream(StreamStructs.initializeStreamData calldata streamParams)\n        external\n        payable\n        override\n        nonReentrant\n    {\n        require(_approvedTokens[streamParams.tokenAddress], \"token not registered\");\n\n        uint256 feeConsumed = CreateLogic.create(\n            nextStreamId,\n            msg.value,\n            StreamStructs.GlobalConfig({\n                weth: WETH,\n                gateway: GATEWAY,\n                feeRecipient: _protocolFeeCollector,\n                autoWithdrawAccount: _automatedWithdrawWallet,\n                autoWithdrawFeeForOnce: _singleWithdrawFee,\n                tokenFeeRate: _tokenProtocolFee[streamParams.tokenAddress]\n            }),\n            streamParams,\n            _streamRegistry\n        );\n\n        nextStreamId = nextStreamId + 1;\n        \n        // Return excess ETH to sender\n        payable(msg.sender).transfer(msg.value - feeConsumed);\n    }\n\n    /// @notice Extends multiple streams' duration in batch\n    function batchExtendFlow(uint256[] calldata streamIds, uint256[] calldata newStopTimes) \n        external \n        payable \n        nonReentrant \n    {\n        require(streamIds.length == newStopTimes.length, \"length not match\");\n        \n        uint256 remainingValue = msg.value;\n        \n        for (uint256 i = 0; i < streamIds.length; i++) {\n            StreamStructs.StreamData storage streamData = _streamRegistry[streamIds[i]];\n            require(streamData.isActive, \"stream does not exist\");\n            \n            uint256 extensionFee = ExtendLogic.extend(\n                streamIds[i],\n                newStopTimes[i],\n                remainingValue,\n                StreamStructs.GlobalConfig({\n                    weth: WETH,\n                    gateway: GATEWAY,\n                    feeRecipient: _protocolFeeCollector,\n                    autoWithdrawAccount: _automatedWithdrawWallet,\n                    autoWithdrawFeeForOnce: _singleWithdrawFee,\n                    tokenFeeRate: _tokenProtocolFee[streamData.tokenAddress]\n                }),\n                streamData\n            );\n\n            remainingValue -= extensionFee;\n        }\n\n        payable(msg.sender).transfer(remainingValue);\n    }\n\n    /// @notice Extends a single stream's duration\n    function ExtendFlow(uint256 streamId, uint256 newStopTime)\n        external\n        payable\n        override\n        nonReentrant\n        onlyValidStream(streamId)\n    {\n        StreamStructs.StreamData storage streamData = _streamRegistry[streamId];\n\n        uint256 extensionCost = ExtendLogic.extend(\n            streamId,\n            newStopTime,\n            msg.value,\n            StreamStructs.GlobalConfig({\n                weth: WETH,\n                gateway: GATEWAY,\n                feeRecipient: _protocolFeeCollector,\n                autoWithdrawAccount: _automatedWithdrawWallet,\n                autoWithdrawFeeForOnce: _singleWithdrawFee,\n                tokenFeeRate: _tokenProtocolFee[streamData.tokenAddress]\n            }),\n            streamData\n        );\n\n        payable(msg.sender).transfer(msg.value - extensionCost);\n    }\n\n    /// @notice Processes withdrawals for multiple streams\n    function batchWithdrawFromFlow(uint256[] calldata streamIds) external {\n        for (uint256 i = 0; i < streamIds.length; i++) {\n            WithdrawFromFlow(streamIds[i]);\n        }\n    }\n\n    /// @notice Withdraws available tokens from a stream to the recipient\n    /// @param streamId The identifier of the stream to withdraw from\n    function WithdrawFromFlow(uint256 streamId)\n        public\n        override\n        onlyValidStream(streamId)\n    {\n        StreamStructs.StreamData storage streamData = _streamRegistry[streamId];\n\n        uint256 intervalsPassed = deltaOf(streamId);\n        uint256 availableBalance = balanceOf(streamId, streamData.recipient);\n\n        require(availableBalance > 0, \"no balance to withdraw\");\n\n        WithdrawLogic.withdraw(\n            streamId,\n            intervalsPassed,\n            availableBalance,\n            StreamStructs.GlobalConfig({\n                weth: WETH,\n                gateway: GATEWAY,\n                feeRecipient: _protocolFeeCollector,\n                autoWithdrawAccount: _automatedWithdrawWallet,\n                autoWithdrawFeeForOnce: _singleWithdrawFee,\n                tokenFeeRate: _tokenProtocolFee[streamData.tokenAddress]\n            }),\n            streamData\n        );\n    }\n\n    /// @notice Terminates multiple streams and distributes remaining funds\n    function batchCloseStream(uint256[] calldata streamIds) external {\n        for (uint256 i = 0; i < streamIds.length; i++) {\n            closeStream(streamIds[i]);\n        }\n    }\n\n    /// @notice Terminates a stream and distributes remaining tokens proportionally\n    /// @dev Only sender or recipient can close based on stream permissions\n    /// @param streamId The identifier of the stream to terminate\n    function closeStream(uint256 streamId)\n        public\n        override\n        onlyValidStream(streamId)\n    {\n        StreamStructs.StreamData memory streamData = _streamRegistry[streamId];\n        require(!streamData.closed, \"stream is closed\");\n\n        uint256 intervalsPassed = deltaOf(streamId);\n        uint256 senderBalance = balanceOf(streamId, streamData.sender);\n        uint256 recipientBalance = balanceOf(streamId, streamData.recipient);\n\n        // Handle WETH streams with gateway logic\n        if (WETH == streamData.tokenAddress && msg.sender == streamData.onBehalfOf) {\n            _validateClosePermissionForGateway(streamData);\n            IERC20(streamData.tokenAddress).safeTransfer(\n                streamData.onBehalfOf,\n                _streamRegistry[streamId].remainingBalance\n            );\n        } else {\n            _validateClosePermission(streamData);\n            _distributeStreamFunds(streamId, streamData, recipientBalance, senderBalance);\n        }\n\n        // Handle cliff vesting\n        if (!streamData.cliffData.cliffClaimed) {\n            _streamRegistry[streamId].cliffData.cliffClaimed = true;\n        }\n\n        // Update stream state\n        if (intervalsPassed > 0) {\n            _streamRegistry[streamId].lastWithdrawTime += \n                streamData.interval * intervalsPassed + streamData.pauseData.totalPausedTime;\n            _streamRegistry[streamId].pauseData.totalPausedTime = 0;\n        }\n\n        _streamRegistry[streamId].closed = true;\n        _streamRegistry[streamId].remainingBalance = 0;\n\n        emit StreamClosed(streamId, msg.sender, senderBalance, recipientBalance);\n    }\n\n    /// @notice Pauses multiple streams simultaneously\n    function batchPauseStream(uint256[] calldata streamIds) external {\n        for (uint256 i = 0; i < streamIds.length; i++) {\n            pauseStream(streamIds[i]);\n        }\n    }\n\n    /// @notice Temporarily halts stream payments\n    function pauseStream(uint256 streamId)\n        public\n        override\n        onlyValidStream(streamId)\n    {\n        StreamStructs.StreamData storage streamData = _streamRegistry[streamId];\n        \n        _validatePauseConditions(streamData);\n        \n        // Handle permission validation and set pause initiator\n        if (WETH == streamData.tokenAddress && msg.sender == streamData.onBehalfOf) {\n            _setPausePermissionForGateway(streamData);\n        } else {\n            _setPausePermission(streamData);\n        }\n\n        // Process any pending withdrawals before pausing\n        uint256 pendingBalance = balanceOf(streamId, streamData.recipient);\n        if (pendingBalance > 0) {\n            WithdrawLogic.withdraw(\n                streamId,\n                deltaOf(streamId),\n                pendingBalance,\n                StreamStructs.GlobalConfig({\n                    weth: WETH,\n                    gateway: GATEWAY,\n                    feeRecipient: _protocolFeeCollector,\n                    autoWithdrawAccount: _automatedWithdrawWallet,\n                    autoWithdrawFeeForOnce: _singleWithdrawFee,\n                    tokenFeeRate: _tokenProtocolFee[streamData.tokenAddress]\n                }),\n                streamData\n            );\n        }\n\n        // Activate pause state\n        streamData.pauseData.pausedAt = block.timestamp;\n        streamData.pauseData.isPaused = true;\n\n        emit StreamPaused(streamId, streamData.pauseData.pausedBy, pendingBalance);\n    }\n\n    /// @notice Resumes multiple paused streams\n    function batchResumeStream(uint256[] calldata streamIds) external {\n        for (uint256 i = 0; i < streamIds.length; i++) {\n            resumeStream(streamIds[i]);\n        }\n    }\n\n    /// @notice Reactivates a paused stream\n    function resumeStream(uint256 streamId)\n        public\n        override\n        onlyValidStream(streamId)\n    {\n        StreamStructs.StreamData storage streamData = _streamRegistry[streamId];\n        \n        require(streamData.pauseData.isPaused, \"stream is not paused\");\n        require(!streamData.closed, \"stream is closed\");\n        require(\n            streamData.pauseData.pausedBy == msg.sender || owner() == msg.sender,\n            \"only the one who paused the stream can resume it\"\n        );\n\n        // Calculate pause duration and adjust stream timing\n        uint256 pauseDuration = _calculatePauseDuration(streamData);\n\n        streamData.pauseData.isPaused = false;\n        streamData.pauseData.pausedAt = 0;\n        streamData.pauseData.pausedBy = address(0x00);\n        streamData.pauseData.totalPausedTime += pauseDuration;\n        streamData.stopTime += pauseDuration;\n\n        emit StreamResumed(streamId, msg.sender, pauseDuration);\n    }\n\n    /// @notice Updates recipients for multiple streams\n    function batchSetNewRecipient(uint256[] calldata streamIds, address[] calldata newRecipients) \n        external \n    {\n        require(streamIds.length == newRecipients.length, \"length not match\");\n\n        for (uint256 i = 0; i < streamIds.length; i++) {\n            setNewRecipient(streamIds[i], newRecipients[i]);\n        }\n    }\n\n    /// @notice Changes the beneficiary of a stream\n    function setNewRecipient(uint256 streamId, address newRecipient)\n        public\n        override\n        onlyValidStream(streamId)\n    {\n        StreamStructs.StreamData storage streamData = _streamRegistry[streamId];\n        require(!streamData.closed, \"stream is closed\");\n        require(!streamData.pauseData.isPaused, \"stream is paused\");\n\n        _validateRecipientChangePermission(streamData);\n\n        streamData.recipient = newRecipient;\n\n        emit RecipientUpdated(streamId, msg.sender, newRecipient);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        ADMIN FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Adds a token to the whitelist with specified fee rate\n    function tokenRegister(address tokenAddress, uint256 feeRate) \n        public \n        onlyOwner \n    {\n        _approvedTokens[tokenAddress] = true;\n        _tokenProtocolFee[tokenAddress] = feeRate;\n\n        emit TokenWhitelisted(tokenAddress, feeRate);\n    }\n\n    /// @notice Batch registers multiple tokens\n    function batchTokenRegister(address[] calldata tokenAddresses, uint256[] calldata feeRates) \n        external \n        onlyOwner \n    {\n        require(tokenAddresses.length == feeRates.length, \"length not match\");\n\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\n            tokenRegister(tokenAddresses[i], feeRates[i]);\n        }\n    }\n\n    /// @notice Updates the protocol fee collector address\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\n        _protocolFeeCollector = newFeeRecipient;\n    }\n\n    /// @notice Updates the automated withdrawal account\n    function setAutoWithdrawAccount(address newWithdrawAccount) external onlyOwner {\n        _automatedWithdrawWallet = newWithdrawAccount;\n    }\n\n    /// @notice Updates the automated withdrawal fee\n    function setAutoWithdrawFee(uint256 newWithdrawFee) external onlyOwner {\n        _singleWithdrawFee = newWithdrawFee;\n    }\n\n    /// @notice Updates the gateway contract address\n    function setGateway(address gateway) external onlyOwner {\n        GATEWAY = gateway;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL HELPER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function _validateClosePermission(StreamStructs.StreamData memory streamData) private view {\n        if (msg.sender == streamData.sender) {\n            require(\n                streamData.permissionData.closeable == StreamStructs.Permission.Both ||\n                streamData.permissionData.closeable == StreamStructs.Permission.Sender,\n                \"sender is not allowed to close the stream\"\n            );\n        } else if (msg.sender == streamData.recipient) {\n            require(\n                streamData.permissionData.closeable == StreamStructs.Permission.Both ||\n                streamData.permissionData.closeable == StreamStructs.Permission.Recipient,\n                \"recipient is not allowed to close the stream\"\n            );\n        } else {\n            revert(\"not allowed to close the stream\");\n        }\n    }\n\n    function _validateClosePermissionForGateway(StreamStructs.StreamData memory streamData) private view {\n        if (tx.origin == streamData.sender) {\n            require(\n                streamData.permissionData.closeable == StreamStructs.Permission.Both ||\n                streamData.permissionData.closeable == StreamStructs.Permission.Sender,\n                \"sender is not allowed to close the stream\"\n            );\n        } else if (tx.origin == streamData.recipient) {\n            require(\n                streamData.permissionData.closeable == StreamStructs.Permission.Both ||\n                streamData.permissionData.closeable == StreamStructs.Permission.Recipient,\n                \"recipient is not allowed to close the stream\"\n            );\n        } else {\n            revert(\"not allowed to close the stream\");\n        }\n    }\n\n    function _distributeStreamFunds(\n        uint256 streamId,\n        StreamStructs.StreamData memory streamData,\n        uint256 recipientBalance,\n        uint256 senderBalance\n    ) private {\n        if (recipientBalance > 0) {\n            uint256 protocolFee = (recipientBalance * _tokenProtocolFee[streamData.tokenAddress]) / 10000;\n            IERC20(streamData.tokenAddress).safeTransfer(_protocolFeeCollector, protocolFee);\n            IERC20(streamData.tokenAddress).safeTransfer(\n                streamData.recipient,\n                recipientBalance - protocolFee\n            );\n        }\n        if (senderBalance > 0) {\n            IERC20(streamData.tokenAddress).safeTransfer(streamData.sender, senderBalance);\n        }\n    }\n\n    function _validatePauseConditions(StreamStructs.StreamData memory streamData) private view {\n        require(!streamData.pauseData.isPaused, \"vesting is paused\");\n        require(!streamData.closed, \"vesting is closed\");\n        require(streamData.stopTime > block.timestamp, \"vesting is expired\");\n    }\n\n    function _setPausePermission(StreamStructs.StreamData storage streamData) private {\n        if (msg.sender == streamData.sender) {\n            require(\n                streamData.permissionData.pauseable == StreamStructs.Permission.Both ||\n                streamData.permissionData.pauseable == StreamStructs.Permission.Sender,\n                \"sender is not allowed to pause the stream\"\n            );\n            streamData.pauseData.pausedBy = streamData.sender;\n        } else if (msg.sender == streamData.recipient) {\n            require(\n                streamData.permissionData.pauseable == StreamStructs.Permission.Both ||\n                streamData.permissionData.pauseable == StreamStructs.Permission.Recipient,\n                \"recipient is not allowed to pause the stream\"\n            );\n            streamData.pauseData.pausedBy = streamData.recipient;\n        } else {\n            revert(\"not allowed to pause the stream\");\n        }\n    }\n\n    function _setPausePermissionForGateway(StreamStructs.StreamData storage streamData) private {\n        if (tx.origin == streamData.sender) {\n            require(\n                streamData.permissionData.pauseable == StreamStructs.Permission.Both ||\n                streamData.permissionData.pauseable == StreamStructs.Permission.Sender,\n                \"sender is not allowed to pause the stream\"\n            );\n            streamData.pauseData.pausedBy = streamData.sender;\n        } else if (tx.origin == streamData.recipient) {\n            require(\n                streamData.permissionData.pauseable == StreamStructs.Permission.Both ||\n                streamData.permissionData.pauseable == StreamStructs.Permission.Recipient,\n                \"recipient is not allowed to pause the stream\"\n            );\n            streamData.pauseData.pausedBy = streamData.recipient;\n        } else {\n            revert(\"not allowed to pause the stream\");\n        }\n    }\n\n    function _calculatePauseDuration(StreamStructs.StreamData memory streamData) private view returns (uint256) {\n        uint256 duration = 0;\n        if (block.timestamp > streamData.startTime) {\n            if (streamData.pauseData.pausedAt > streamData.startTime) {\n                duration = block.timestamp - streamData.pauseData.pausedAt;\n            } else {\n                duration = block.timestamp - streamData.startTime;\n            }\n        }\n        return duration;\n    }\n\n    function _validateRecipientChangePermission(StreamStructs.StreamData memory streamData) private view {\n        if (msg.sender == streamData.sender) {\n            require(\n                streamData.permissionData.recipientModifiable == StreamStructs.Permission.Both ||\n                streamData.permissionData.recipientModifiable == StreamStructs.Permission.Sender,\n                \"sender is not allowed to change the recipient\"\n            );\n        } else if (msg.sender == streamData.recipient) {\n            require(\n                streamData.permissionData.recipientModifiable == StreamStructs.Permission.Both ||\n                streamData.permissionData.recipientModifiable == StreamStructs.Permission.Recipient,\n                \"recipient is not allowed to change the recipient\"\n            );\n        } else {\n            revert(\"not allowed to change the recipient\");\n        }\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
