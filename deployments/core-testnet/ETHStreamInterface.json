{
  "address": "0x868B5c028910F3Dc22560bDCecc307bBBf0473Ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract IStream",
          "name": "_stream",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStopTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedReceiver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimFromMultipleStreamsETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "claimFromStreamETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interval",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoWithdrawInterval",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "autoWithdraw",
              "type": "bool"
            },
            {
              "internalType": "enum StreamStructs.Permission",
              "name": "pauseable",
              "type": "uint8"
            },
            {
              "internalType": "enum StreamStructs.Permission",
              "name": "closeable",
              "type": "uint8"
            },
            {
              "internalType": "enum StreamStructs.Permission",
              "name": "recipientModifiable",
              "type": "uint8"
            }
          ],
          "internalType": "struct StreamStructs.initializeStreamData[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "createMultipleStreamsETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyEtherTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWETHAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "haltMultipleStreamsETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "haltStreamETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interval",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoWithdrawInterval",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "autoWithdraw",
              "type": "bool"
            },
            {
              "internalType": "enum StreamStructs.Permission",
              "name": "pauseable",
              "type": "uint8"
            },
            {
              "internalType": "enum StreamStructs.Permission",
              "name": "closeable",
              "type": "uint8"
            },
            {
              "internalType": "enum StreamStructs.Permission",
              "name": "recipientModifiable",
              "type": "uint8"
            }
          ],
          "internalType": "struct StreamStructs.initializeStreamData",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initializeStreamETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newStopTimes",
          "type": "uint256[]"
        }
      ],
      "name": "prolongMultipleStreamsETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newStopTime",
          "type": "uint256"
        }
      ],
      "name": "prolongStreamETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "terminateMultipleStreamsETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "terminateStreamETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x38663d33eabb6dd4602eb7b2e5542b28e13c6db312764eaede72044200a97c53",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x366454Aa75572d6Aa9D505bca1199B5c148C0b2A",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2918432",
    "logsBloom": "0x
    "blockHash": "0xcd2cc9b7f38b4b09b3bbac06634dd31ed1d21f6aa525f3c413c011c998dcc09d",
    "transactionHash": "0x38663d33eabb6dd4602eb7b2e5542b28e13c6db312764eaede72044200a97c53",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6109881,
        "transactionHash": "0x38663d33eabb6dd4602eb7b2e5542b28e13c6db312764eaede72044200a97c53",
        "address": "0x868B5c028910F3Dc22560bDCecc307bBBf0473Ba",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcd2cc9b7f38b4b09b3bbac06634dd31ed1d21f6aa525f3c413c011c998dcc09d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6109881,
        "transactionHash": "0x38663d33eabb6dd4602eb7b2e5542b28e13c6db312764eaede72044200a97c53",
        "address": "0x7Ce5fCfFd1296d870b3578809B31D8CA8bF5aC3d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000868b5c028910f3dc22560bdcecc307bbbf0473ba",
          "0x000000000000000000000000702e327fe043c4cb02f4e9d796a25b385e9559f5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xcd2cc9b7f38b4b09b3bbac06634dd31ed1d21f6aa525f3c413c011c998dcc09d"
      }
    ],
    "blockNumber": 6109881,
    "cumulativeGasUsed": "2918432",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7Ce5fCfFd1296d870b3578809B31D8CA8bF5aC3d",
    "0x702E327Fe043c4cB02f4e9D796A25b385e9559F5"
  ],
  "numDeployments": 5,
  "solcInputHash": "4ba73d9b78b122c8c7cd561d86631c6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IStream\",\"name\":\"_stream\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStopTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedReceiver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"claimFromMultipleStreamsETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"claimFromStreamETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoWithdrawInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoWithdraw\",\"type\":\"bool\"},{\"internalType\":\"enum StreamStructs.Permission\",\"name\":\"pauseable\",\"type\":\"uint8\"},{\"internalType\":\"enum StreamStructs.Permission\",\"name\":\"closeable\",\"type\":\"uint8\"},{\"internalType\":\"enum StreamStructs.Permission\",\"name\":\"recipientModifiable\",\"type\":\"uint8\"}],\"internalType\":\"struct StreamStructs.initializeStreamData[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"createMultipleStreamsETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEtherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"haltMultipleStreamsETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"haltStreamETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoWithdrawInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoWithdraw\",\"type\":\"bool\"},{\"internalType\":\"enum StreamStructs.Permission\",\"name\":\"pauseable\",\"type\":\"uint8\"},{\"internalType\":\"enum StreamStructs.Permission\",\"name\":\"closeable\",\"type\":\"uint8\"},{\"internalType\":\"enum StreamStructs.Permission\",\"name\":\"recipientModifiable\",\"type\":\"uint8\"}],\"internalType\":\"struct StreamStructs.initializeStreamData\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initializeStreamETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newStopTimes\",\"type\":\"uint256[]\"}],\"name\":\"prolongMultipleStreamsETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStopTime\",\"type\":\"uint256\"}],\"name\":\"prolongStreamETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"terminateMultipleStreamsETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"terminateStreamETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETHStreamInterface.sol\":\"ETHStreamInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ETHStreamInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {IStream} from \\\"./interfaces/IStream.sol\\\";\\nimport {StreamStructs} from \\\"./libraries/StreamStructs.sol\\\";\\n\\ncontract ETHStreamInterface is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom Errors\\n    error InvalidTokenAddress();\\n    error ArrayLengthMismatch();\\n    error InvalidStopTime();\\n    error TransferFailed();\\n    error UnauthorizedReceiver();\\n    error FallbackNotAllowed();\\n\\n    IWETH internal immutable WETH;\\n    IStream internal immutable STREAM;\\n\\n    constructor(address _weth, IStream _stream) ReentrancyGuard() Ownable() {\\n        WETH = IWETH(_weth);    \\n        STREAM = _stream;\\n        IWETH(_weth).approve(address(_stream), type(uint256).max);\\n    }\\n\\n    function createMultipleStreamsETH(\\n        StreamStructs.initializeStreamData[] calldata params\\n    ) external payable nonReentrant {\\n        (uint256 totalDeposit, uint256 totalAutoWithdrawFee) = _processMultipleStreamCreation(params);\\n        _refundExcess(totalDeposit + totalAutoWithdrawFee);\\n    }\\n\\n    function initializeStreamETH(\\n        StreamStructs.initializeStreamData calldata params\\n    ) external payable nonReentrant {\\n        if (params.tokenAddress != address(0x00)) revert InvalidTokenAddress();\\n        \\n        uint256 autoWithdrawFee = _calculateAutoWithdrawFee(params);\\n        \\n        WETH.deposit{value: params.deposit}();\\n        \\n        StreamStructs.initializeStreamData memory streamParams = _buildStreamParams(params);\\n        STREAM.initializeStream{value: autoWithdrawFee}(streamParams);\\n        \\n        _handleCliffPayment(params);\\n        _refundExcess(params.deposit + autoWithdrawFee);\\n    }\\n\\n    function prolongMultipleStreamsETH(\\n        uint256[] calldata streamIds,\\n        uint256[] calldata newStopTimes\\n    ) external payable nonReentrant {\\n        if (streamIds.length != newStopTimes.length) revert ArrayLengthMismatch();\\n\\n        (uint256 totalDeposit, uint256 totalAutoWithdrawFee) = _processMultipleStreamExtension(streamIds, newStopTimes);\\n        _refundExcess(totalDeposit + totalAutoWithdrawFee);\\n    }\\n\\n    function prolongStreamETH(\\n        uint256 streamId,\\n        uint256 newStopTime\\n    ) external payable nonReentrant {\\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\\n        (uint256 newDeposit, uint256 autoWithdrawFee) = _calculateExtensionCosts(stream, newStopTime);\\n        \\n        WETH.deposit{value: newDeposit}();\\n        STREAM.ExtendFlow{value: autoWithdrawFee}(streamId, newStopTime);\\n        \\n        _refundExcess(newDeposit + autoWithdrawFee);\\n    }\\n\\n    function claimFromMultipleStreamsETH(\\n        uint256[] calldata streamIds\\n    ) external nonReentrant {\\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n        address feeRecipient = STREAM.feeRecipient();\\n        \\n        for (uint256 i; i < streamIds.length; ++i) {\\n            _processClaim(streamIds[i], feeRate, feeRecipient);\\n        }\\n    }\\n\\n    function claimFromStreamETH(uint256 streamId) external nonReentrant {\\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n        address feeRecipient = STREAM.feeRecipient();\\n        _processClaim(streamId, feeRate, feeRecipient);\\n    }\\n\\n    function terminateMultipleStreamsETH(\\n        uint256[] calldata streamIds\\n    ) external nonReentrant {\\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n        address feeRecipient = STREAM.feeRecipient();\\n        \\n        for (uint256 i; i < streamIds.length; ++i) {\\n            _processTermination(streamIds[i], feeRate, feeRecipient);\\n        }\\n    }\\n\\n    function terminateStreamETH(uint256 streamId) external nonReentrant {\\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n        address feeRecipient = STREAM.feeRecipient();\\n        _processTermination(streamId, feeRate, feeRecipient);\\n    }\\n\\n    function haltMultipleStreamsETH(\\n        uint256[] calldata streamIds\\n    ) external nonReentrant {\\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n        address feeRecipient = STREAM.feeRecipient();\\n        \\n        for (uint256 i; i < streamIds.length; ++i) {\\n            _processHalt(streamIds[i], feeRate, feeRecipient);\\n        }\\n    }\\n\\n    function haltStreamETH(uint256 streamId) external nonReentrant {\\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n        address feeRecipient = STREAM.feeRecipient();\\n        _processHalt(streamId, feeRate, feeRecipient);\\n    }\\n\\n    // Internal helper functions\\n    function _processMultipleStreamCreation(\\n        StreamStructs.initializeStreamData[] calldata params\\n    ) internal returns (uint256 totalDeposit, uint256 totalAutoWithdrawFee) {\\n        uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\\n        uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n        address feeRecipient = STREAM.feeRecipient();\\n        \\n        for (uint256 i; i < params.length; ++i) {\\n            StreamStructs.initializeStreamData calldata currentParams = params[i];\\n            if (currentParams.tokenAddress != address(0x00)) revert InvalidTokenAddress();\\n            \\n            uint256 autoWithdrawFee;\\n            if (currentParams.autoWithdraw) {\\n                autoWithdrawFee = autoWithdrawFeeForOnce * \\n                    ((currentParams.stopTime - currentParams.startTime) / \\n                     currentParams.autoWithdrawInterval + 1);\\n                totalAutoWithdrawFee += autoWithdrawFee;\\n            }\\n            \\n            totalDeposit += currentParams.deposit;\\n            WETH.deposit{value: currentParams.deposit}();\\n            \\n            StreamStructs.initializeStreamData memory streamParams = _buildStreamParams(currentParams);\\n            STREAM.initializeStream{value: autoWithdrawFee}(streamParams);\\n            \\n            if (currentParams.cliffTime <= block.timestamp && currentParams.cliffAmount > 0) {\\n                uint256 fee = (currentParams.cliffAmount * feeRate) / 10000;\\n                WETH.withdraw(currentParams.cliffAmount);\\n                _transferETH(currentParams.recipient, currentParams.cliffAmount - fee);\\n                _transferETH(feeRecipient, fee);\\n            }\\n        }\\n    }\\n\\n    function _processMultipleStreamExtension(\\n        uint256[] calldata streamIds,\\n        uint256[] calldata newStopTimes\\n    ) internal returns (uint256 totalDeposit, uint256 totalAutoWithdrawFee) {\\n        uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\\n        \\n        for (uint256 i; i < streamIds.length; ++i) {\\n            StreamStructs.StreamData memory stream = STREAM.getStream(streamIds[i]);\\n            uint256 duration = newStopTimes[i] - stream.stopTime;\\n            uint256 delta = duration / stream.interval;\\n            \\n            if (delta * stream.interval != duration) revert InvalidStopTime();\\n            \\n            uint256 newDeposit = delta * stream.ratePerInterval;\\n            totalDeposit += newDeposit;\\n            \\n            uint256 autoWithdrawFee;\\n            if (stream.autoWithdraw) {\\n                autoWithdrawFee = autoWithdrawFeeForOnce * \\n                    (duration / stream.autoWithdrawInterval + 1);\\n                totalAutoWithdrawFee += autoWithdrawFee;\\n            }\\n            \\n            WETH.deposit{value: newDeposit}();\\n            STREAM.ExtendFlow{value: autoWithdrawFee}(streamIds[i], newStopTimes[i]);\\n        }\\n    }\\n\\n    function _calculateExtensionCosts(\\n        StreamStructs.StreamData memory stream,\\n        uint256 newStopTime\\n    ) internal view returns (uint256 newDeposit, uint256 autoWithdrawFee) {\\n        uint256 duration = newStopTime - stream.stopTime;\\n        uint256 delta = duration / stream.interval;\\n        \\n        if (delta * stream.interval != duration) revert InvalidStopTime();\\n        \\n        newDeposit = delta * stream.ratePerInterval;\\n        \\n        if (stream.autoWithdraw) {\\n            uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\\n            autoWithdrawFee = autoWithdrawFeeForOnce * \\n                (duration / stream.autoWithdrawInterval + 1);\\n        }\\n    }\\n\\n    function _processClaim(uint256 streamId, uint256 feeRate, address feeRecipient) internal {\\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\\n        uint256 balance = STREAM.balanceOf(streamId, stream.recipient);\\n        \\n        STREAM.WithdrawFromFlow(streamId);\\n        if (balance > 0) {\\n            uint256 fee = (balance * feeRate) / 10000;\\n            WETH.withdraw(balance);\\n            _transferETH(stream.recipient, balance - fee);\\n            _transferETH(feeRecipient, fee);\\n        }\\n    }\\n\\n    function _processTermination(uint256 streamId, uint256 feeRate, address feeRecipient) internal {\\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\\n        uint256 senderBalance = STREAM.balanceOf(streamId, stream.sender);\\n        uint256 recipientBalance = STREAM.balanceOf(streamId, stream.recipient);\\n        \\n        STREAM.closeStream(streamId);\\n        WETH.withdraw(senderBalance + recipientBalance);\\n        \\n        if (senderBalance > 0) {\\n            _transferETH(stream.sender, senderBalance);\\n        }\\n        if (recipientBalance > 0) {\\n            uint256 fee = (recipientBalance * feeRate) / 10000;\\n            _transferETH(stream.recipient, recipientBalance - fee);\\n            _transferETH(feeRecipient, fee);\\n        }\\n    }\\n\\n    function _processHalt(uint256 streamId, uint256 feeRate, address feeRecipient) internal {\\n        StreamStructs.StreamData memory stream = STREAM.getStream(streamId);\\n        uint256 balance = STREAM.balanceOf(streamId, stream.recipient);\\n        \\n        STREAM.pauseStream(streamId);\\n        if (balance > 0) {\\n            uint256 fee = (balance * feeRate) / 10000;\\n            WETH.withdraw(balance);\\n            _transferETH(stream.recipient, balance - fee);\\n            _transferETH(feeRecipient, fee);\\n        }\\n    }\\n\\n    function _calculateAutoWithdrawFee(\\n        StreamStructs.initializeStreamData calldata params\\n    ) internal view returns (uint256) {\\n        if (!params.autoWithdraw) return 0;\\n        \\n        uint256 autoWithdrawFeeForOnce = STREAM.autoWithdrawFeeForOnce();\\n        return autoWithdrawFeeForOnce * \\n            ((params.stopTime - params.startTime) / params.autoWithdrawInterval + 1);\\n    }\\n\\n    function _buildStreamParams(\\n        StreamStructs.initializeStreamData calldata params\\n    ) internal view returns (StreamStructs.initializeStreamData memory) {\\n        return StreamStructs.initializeStreamData({\\n            sender: params.sender,\\n            recipient: params.recipient,\\n            deposit: params.deposit,\\n            tokenAddress: address(WETH),\\n            startTime: params.startTime,\\n            stopTime: params.stopTime,\\n            interval: params.interval,\\n            cliffAmount: params.cliffAmount,\\n            cliffTime: params.cliffTime,\\n            autoWithdrawInterval: params.autoWithdrawInterval,\\n            autoWithdraw: params.autoWithdraw,\\n            pauseable: params.pauseable,\\n            closeable: params.closeable,\\n            recipientModifiable: params.recipientModifiable\\n        });\\n    }\\n\\n    function _handleCliffPayment(StreamStructs.initializeStreamData calldata params) internal {\\n        if (params.cliffTime <= block.timestamp && params.cliffAmount > 0) {\\n            uint256 feeRate = STREAM.tokenFeeRate(address(WETH));\\n            address feeRecipient = STREAM.feeRecipient();\\n            uint256 fee = (params.cliffAmount * feeRate) / 10000;\\n            WETH.withdraw(params.cliffAmount);\\n            _transferETH(params.recipient, params.cliffAmount - fee);\\n            _transferETH(feeRecipient, fee);\\n        }\\n    }\\n\\n    function _refundExcess(uint256 totalUsed) internal {\\n        if (msg.value > totalUsed) {\\n            _transferETH(msg.sender, msg.value - totalUsed);\\n        }\\n    }\\n\\n    function _transferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    // Emergency functions\\n    function emergencyTokenTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    function emergencyEtherTransfer(\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        _transferETH(to, amount);\\n    }\\n\\n    // View functions\\n    function getWETHAddress() external view returns (address) {\\n        return address(WETH);\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != address(WETH) && msg.sender != address(STREAM)) {\\n            revert UnauthorizedReceiver();\\n        }\\n    }\\n\\n    fallback() external payable {\\n        revert FallbackNotAllowed();\\n    }\\n}\",\"keccak256\":\"0x0009c3d988569cc2df96c71d10f28b32a7a7a898a80e1d3998b7cbdb1d641f07\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {StreamStructs} from \\\"../libraries/StreamStructs.sol\\\";\\n\\ninterface IStream {\\n    function tokenFeeRate(address tokenAddress) external view returns (uint256);\\n    \\n    function autoWithdrawFeeForOnce() external view returns (uint256);\\n    \\n    function autoWithdrawAccount() external view returns (address);\\n    \\n    function feeRecipient() external view returns (address);\\n    \\n    function getStream(uint256 streamId) external view returns (StreamStructs.StreamData memory);\\n    \\n    function balanceOf(uint256 streamId, address account) external view returns (uint256 balance);\\n    \\n    function initializeStream(StreamStructs.initializeStreamData calldata streamParams) external payable;\\n    \\n    function ExtendFlow(uint256 streamId, uint256 newStopTime) external payable;\\n    \\n    function WithdrawFromFlow(uint256 streamId) external;\\n    \\n    function closeStream(uint256 streamId) external;\\n    \\n    function pauseStream(uint256 streamId) external;\\n    \\n    function resumeStream(uint256 streamId) external;\\n    \\n    function setNewRecipient(uint256 streamId, address newRecipient) external;\\n}\",\"keccak256\":\"0xa87f714aee5f925aef887cc6a3668da63a4feab9b4b2bbc26d30ce46e01c7c81\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3cd9fc4e2ca0cd270484dfec3324f682699c185f08e2854148d35742d27a2540\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/StreamStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary StreamStructs {\\n\\n    enum Permission {\\n        None,      // No permissions\\n        Sender,\\n        Recipient,\\n        Both\\n    }\\n\\n    struct StreamData {\\n        address onBehalfOf;\\n        address sender;\\n        address recipient;\\n        uint256 deposit;\\n        address tokenAddress;\\n        uint256 startTime;\\n        uint256 stopTime;\\n        uint256 interval;\\n        uint256 ratePerInterval;\\n        uint256 remainingBalance;\\n        uint256 lastWithdrawTime;\\n        uint256 createdAt;\\n        uint256 autoWithdrawInterval;\\n        bool autoWithdraw;\\n        bool closed;\\n        bool isActive;\\n        CliffData cliffData;\\n        PermissionData permissionData;\\n        PauseData pauseData;\\n    }\\n\\n    struct CliffData {\\n        uint256 cliffAmount;\\n        uint256 cliffTime;\\n        bool cliffClaimed;\\n    }\\n\\n    struct PermissionData {\\n        Permission pauseable;\\n        Permission closeable;\\n        Permission recipientModifiable;\\n    }\\n\\n    struct PauseData {\\n        uint256 pausedAt;\\n        uint256 totalPausedTime;\\n        address pausedBy;\\n        bool isPaused;\\n    }\\n\\n    struct GlobalConfig {\\n        address weth;\\n        address gateway;\\n        address feeRecipient;\\n        address autoWithdrawAccount;\\n        uint256 autoWithdrawFeeForOnce;\\n        uint256 tokenFeeRate;\\n    }\\n\\n    struct initializeStreamData {\\n        address sender;\\n        address recipient;\\n        uint256 deposit;\\n        address tokenAddress;\\n        uint256 startTime;\\n        uint256 stopTime;\\n        uint256 interval;\\n        uint256 cliffAmount;\\n        uint256 cliffTime;\\n        uint256 autoWithdrawInterval;\\n        bool autoWithdraw;\\n        Permission pauseable;\\n        Permission closeable;\\n        Permission recipientModifiable;\\n    }\\n}\",\"keccak256\":\"0x7a21fdb25454fca2f430c1b155094d00fd24426e14c24171373c49b69cb7e79a\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620035b4380380620035b4833981016040819052620000349162000139565b6200003f33620000d0565b600180556001600160a01b03828116608081905290821660a081905260405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015620000a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c7919062000178565b505050620001a3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200013657600080fd5b50565b600080604083850312156200014d57600080fd5b82516200015a8162000120565b60208401519092506200016d8162000120565b809150509250929050565b6000602082840312156200018b57600080fd5b815180151581146200019c57600080fd5b9392505050565b60805160a051613271620003436000396000818161013b015281816103cb0152818161043e01528181610558015281816105cb015281816106d5015281816107480152818161082d015281816108a00152818161094e01528181610a6301528181610bb501528181610caa01528181610d1d01528181610e4801528181610ebb015281816110d301528181611169015281816111f7015281816112b3015281816114200152818161149a015281816115560152818161169701528181611711015281816117cd0152818161187f0152818161196e01528181611bec01528181611c5f01528181611eae01528181611f7301528181611fe4015281816121bf0152818161233e015281816123cf01526125be015260008181610107015281816102d7015281816103a00152818161052d015281816106aa01528181610802015281816109d701528181610b3001528181610c7f01528181610e1d01528181611319015281816115f601528181611a8b01528181611bc101528181611d1a01528181611f450152818161213a01528181612293015261254a01526132716000f3fe6080604052600436106100f75760003560e01c806392f14f681161008a578063cb8ac71c11610059578063cb8ac71c1461031b578063e5ac38851461032e578063eed88b8d14610341578063f2fde38b146103615761017e565b806392f14f6814610288578063a3d5b255146102a8578063affa8817146102c8578063c872c725146102fb5761017e565b8063299b8202116100c6578063299b8202146102175780633e6f79f41461022a578063715018a61461023d5780638da5cb5b146102525761017e565b80630388ecdc146101975780631d875353146101b75780631e7451d2146101d757806328ec1fa6146101f75761017e565b3661017e57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061015e5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561017c576040516379f0ddd560e01b815260040160405180910390fd5b005b604051630deab4c360e41b815260040160405180910390fd5b3480156101a357600080fd5b5061017c6101b2366004612a72565b610381565b3480156101c357600080fd5b5061017c6101d2366004612a72565b61050e565b3480156101e357600080fd5b5061017c6101f2366004612ab4565b61068b565b34801561020357600080fd5b5061017c610212366004612ab4565b6107e3565b61017c610225366004612acd565b61092d565b61017c610238366004612aef565b610ae0565b34801561024957600080fd5b5061017c610c4c565b34801561025e57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b34801561029457600080fd5b5061017c6102a3366004612a72565b610c60565b3480156102b457600080fd5b5061017c6102c3366004612b1d565b610ddd565b3480156102d457600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061026c565b34801561030757600080fd5b5061017c610316366004612ab4565b610dfe565b61017c610329366004612b5e565b610f48565b61017c61033c366004612bd4565b610f7a565b34801561034d57600080fd5b5061017c61035c366004612c40565b610fd4565b34801561036d57600080fd5b5061017c61037c366004612c6c565b610fe6565b610389611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190612cb2565b905060005b838110156104fe576104ee8585838181106104e0576104e0612ccf565b9050602002013584846110ba565b6104f781612cfb565b90506104c3565b50505061050a60018055565b5050565b610516611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b9190612cb2565b905060005b838110156104fe5761067b85858381811061066d5761066d612ccf565b905060200201358484611407565b61068481612cfb565b9050610650565b610693611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190612cb2565b90506107d583838361167e565b50506107e060018055565b50565b6107eb611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190612cb2565b90506107d5838383611407565b610935611061565b60405163894e9a0d60e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa15801561099e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c29190612eb7565b90506000806109d18385611804565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b50506040516350e5099f60e11b815260048101899052602481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316935063a1ca133e92508491506044016000604051808303818588803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b50505050506104fe8183610adb9190612fe7565b611934565b610ae8611061565b6000610afa6080830160608401612c6c565b6001600160a01b031614610b2157604051630f58058360e11b815260040160405180910390fd5b6000610b2c8261194a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083604001356040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b8d57600080fd5b505af1158015610ba1573d6000803e3d6000fd5b50505050506000610bb183611a2e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b501d9783836040518363ffffffff1660e01b8152600401610c009190613038565b6000604051808303818588803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b5050505050610c3b83611b8c565b6107d5610adb836040860135612fe7565b610c54611dab565b610c5e6000611e05565b565b610c68611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d9190612cb2565b905060005b838110156104fe57610dcd858583818110610dbf57610dbf612ccf565b90506020020135848461167e565b610dd681612cfb565b9050610da2565b610de5611dab565b610df96001600160a01b0384168383611e55565b505050565b610e06611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190612cb2565b90506107d58383836110ba565b610f50611061565b600080610f5d8484611ea7565b9092509050610f6f610adb8284612fe7565b505061050a60018055565b610f82611061565b828114610fa25760405163512509d360e11b815260040160405180910390fd5b600080610fb186868686612337565b9092509050610fc3610adb8284612fe7565b5050610fce60018055565b50505050565b610fdc611dab565b61050a8282612697565b610fee611dab565b6001600160a01b0381166110585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6107e081611e05565b6002600154036110b35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104f565b6002600155565b60405163894e9a0d60e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190612eb7565b6020810151604051631b2b776160e11b81529192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691633656eec2916111b09189916004019182526001600160a01b0316602082015260400190565b602060405180830381865afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633656eec28785604001516040518363ffffffff1660e01b81526004016112599291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190612c89565b604051631d1b7b7760e01b8152600481018890529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631d1b7b7790602401600060405180830381600087803b1580156112ff57600080fd5b505af1158015611313573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d82846113529190612fe7565b6040518263ffffffff1660e01b815260040161137091815260200190565b600060405180830381600087803b15801561138a57600080fd5b505af115801561139e573d6000803e3d6000fd5b5050505060008211156113b9576113b9836020015183612697565b80156113ff5760006127106113ce8784613125565b6113d8919061313c565b90506113f3846040015182846113ee919061315e565b612697565b6113fd8582612697565b505b505050505050565b60405163894e9a0d60e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190612eb7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633656eec28684604001516040518363ffffffff1660e01b81526004016114fc9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d9190612c89565b60405163074b2fe960e31b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633a597f48906024015b600060405180830381600087803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b5050505060008111156116775760006127106115d38684613125565b6115dd919061313c565b604051632e1a7d4d60e01b8152600481018490529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561164257600080fd5b505af1158015611656573d6000803e3d6000fd5b505050604084015161166d91506113ee838561315e565b6113ff8482612697565b5050505050565b60405163894e9a0d60e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa1580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b9190612eb7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633656eec28684604001516040518363ffffffff1660e01b81526004016117739291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190612c89565b60405163746ff13d60e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063746ff13d90602401611589565b60008060008460c0015184611819919061315e565b905060008560e001518261182d919061313c565b9050818660e00151826118409190613125565b1461185e57604051635f5ab34960e01b815260040160405180910390fd5b61010086015161186e9082613125565b9350856101a001511561192b5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ff9190612c89565b905086610180015183611912919061313c565b61191d906001612fe7565b6119279082613125565b9350505b50509250929050565b803411156107e0576107e0336113ee833461315e565b600061195e61016083016101408401613171565b61196a57506000919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee9190612c89565b9050610120830135611a08608085013560a086013561315e565b611a12919061313c565b611a1d906001612fe7565b611a279082613125565b9392505050565b611a3661298a565b604080516101c0810190915280611a506020850185612c6c565b6001600160a01b03168152602001836020016020810190611a719190612c6c565b6001600160a01b03168152602001836040013581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001836080013581526020018360a0013581526020018360c0013581526020018360e0013581526020018361010001358152602001836101200135815260200183610140016020810190611b0a9190613171565b15158152602001611b236101808501610160860161318e565b6003811115611b3457611b34613000565b8152602001611b4b6101a08501610180860161318e565b6003811115611b5c57611b5c613000565b8152602001611b736101c085016101a0860161318e565b6003811115611b8457611b84613000565b905292915050565b4281610100013511158015611ba5575060008160e00135115b156107e0576040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdf9190612cb2565b90506000612710611cf48460e0870135613125565b611cfe919061313c565b604051632e1a7d4d60e01b815260e086013560048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611d6657600080fd5b505af1158015611d7a573d6000803e3d6000fd5b50611da19250611d939150506040860160208701612c6c565b6113ee8360e088013561315e565b610fce8282612697565b6000546001600160a01b03163314610c5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161104f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610df9908490612725565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2e9190612c89565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a2e40c4490602401602060405180830381865afa158015611fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fde9190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612040573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120649190612cb2565b905060005b8681101561232c573688888381811061208457612084612ccf565b6101c002919091019150600090506120a26080830160608401612c6c565b6001600160a01b0316146120c957604051630f58058360e11b815260040160405180910390fd5b60006120dd61016083016101408401613171565b15612128576101208201356120fa608084013560a085013561315e565b612104919061313c565b61210f906001612fe7565b6121199087613125565b90506121258188612fe7565b96505b612136604083013589612fe7565b97507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083604001356040518263ffffffff1660e01b81526004016000604051808303818588803b15801561219757600080fd5b505af11580156121ab573d6000803e3d6000fd5b505050505060006121bb83611a2e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b501d9783836040518363ffffffff1660e01b815260040161220a9190613038565b6000604051808303818588803b15801561222357600080fd5b505af1158015612237573d6000803e3d6000fd5b50505050504283610100013511158015612255575060008360e00135115b1561231857600061271061226d8860e0870135613125565b612277919061313c565b604051632e1a7d4d60e01b815260e086013560048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b5061230c9250611d939150506040860160208701612c6c565b6123168682612697565b505b5050508061232590612cfb565b9050612069565b505050509250929050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561239a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123be9190612c89565b905060005b8681101561268c5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663894e9a0d8a8a8581811061240e5761240e612ccf565b905060200201356040518263ffffffff1660e01b815260040161243391815260200190565b61034060405180830381865afa158015612451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124759190612eb7565b905060008160c0015188888581811061249057612490612ccf565b905060200201356124a1919061315e565b905060008260e00151826124b5919061313c565b9050818360e00151826124c89190613125565b146124e657604051635f5ab34960e01b815260040160405180910390fd5b6000836101000151826124f99190613125565b90506125058189612fe7565b97506000846101a001511561254857610180850151612524908561313c565b61252f906001612fe7565b6125399088613125565b90506125458189612fe7565b97505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156125a357600080fd5b505af11580156125b7573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a1ca133e828f8f8a8181106125fe576125fe612ccf565b905060200201358e8e8b81811061261757612617612ccf565b905060200201356040518463ffffffff1660e01b8152600401612644929190918252602082015260400190565b6000604051808303818588803b15801561265d57600080fd5b505af1158015612671573d6000803e3d6000fd5b505050505050505050508061268590612cfb565b90506123c3565b505094509492505050565b604080516000808252602082019092526001600160a01b0384169083906040516126c191906131cf565b60006040518083038185875af1925050503d80600081146126fe576040519150601f19603f3d011682016040523d82523d6000602084013e612703565b606091505b5050905080610df9576040516312171d8360e31b815260040160405180910390fd5b600061277a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127fa9092919063ffffffff16565b905080516000148061279b57508080602001905181019061279b91906131eb565b610df95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161104f565b60606128098484600085612811565b949350505050565b6060824710156128725760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161104f565b600080866001600160a01b0316858760405161288e91906131cf565b60006040518083038185875af1925050503d80600081146128cb576040519150601f19603f3d011682016040523d82523d6000602084013e6128d0565b606091505b50915091506128e1878383876128ec565b979650505050505050565b6060831561295b578251600003612954576001600160a01b0385163b6129545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161104f565b5081612809565b61280983838151156129705781518083602001fd5b8060405162461bcd60e51b815260040161104f9190613208565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006003811115612a1357612a13613000565b8152602001600081526020016000905290565b60008083601f840112612a3857600080fd5b50813567ffffffffffffffff811115612a5057600080fd5b6020830191508360208260051b8501011115612a6b57600080fd5b9250929050565b60008060208385031215612a8557600080fd5b823567ffffffffffffffff811115612a9c57600080fd5b612aa885828601612a26565b90969095509350505050565b600060208284031215612ac657600080fd5b5035919050565b60008060408385031215612ae057600080fd5b50508035926020909101359150565b60006101c08284031215612b0257600080fd5b50919050565b6001600160a01b03811681146107e057600080fd5b600080600060608486031215612b3257600080fd5b8335612b3d81612b08565b92506020840135612b4d81612b08565b929592945050506040919091013590565b60008060208385031215612b7157600080fd5b823567ffffffffffffffff80821115612b8957600080fd5b818501915085601f830112612b9d57600080fd5b813581811115612bac57600080fd5b8660206101c083028501011115612bc257600080fd5b60209290920196919550909350505050565b60008060008060408587031215612bea57600080fd5b843567ffffffffffffffff80821115612c0257600080fd5b612c0e88838901612a26565b90965094506020870135915080821115612c2757600080fd5b50612c3487828801612a26565b95989497509550505050565b60008060408385031215612c5357600080fd5b8235612c5e81612b08565b946020939093013593505050565b600060208284031215612c7e57600080fd5b8135611a2781612b08565b600060208284031215612c9b57600080fd5b5051919050565b8051612cad81612b08565b919050565b600060208284031215612cc457600080fd5b8151611a2781612b08565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d0d57612d0d612ce5565b5060010190565b6040516060810167ffffffffffffffff81118282101715612d4557634e487b7160e01b600052604160045260246000fd5b60405290565b604051610260810167ffffffffffffffff81118282101715612d4557634e487b7160e01b600052604160045260246000fd5b80151581146107e057600080fd5b8051612cad81612d7d565b600060608284031215612da857600080fd5b612db0612d14565b905081518152602082015160208201526040820151612dce81612d7d565b604082015292915050565b600481106107e057600080fd5b600060608284031215612df857600080fd5b612e00612d14565b90508151612e0d81612dd9565b81526020820151612e1d81612dd9565b60208201526040820151612dce81612dd9565b600060808284031215612e4257600080fd5b6040516080810181811067ffffffffffffffff82111715612e7357634e487b7160e01b600052604160045260246000fd5b806040525080915082518152602083015160208201526040830151612e9781612b08565b60408201526060830151612eaa81612d7d565b6060919091015292915050565b60006103408284031215612eca57600080fd5b612ed2612d4b565b612edb83612ca2565b8152612ee960208401612ca2565b6020820152612efa60408401612ca2565b604082015260608301516060820152612f1560808401612ca2565b608082015260a0838101519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a0612f7d818501612d8b565b908201526101c0612f8f848201612d8b565b908201526101e0612fa1848201612d8b565b90820152610200612fb485858301612d96565b90820152612fc6846102608501612de6565b610220820152612fda846102c08501612e30565b6102408201529392505050565b80820180821115612ffa57612ffa612ce5565b92915050565b634e487b7160e01b600052602160045260246000fd5b6004811061303457634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526101c08101602083015161306460208401826001600160a01b03169052565b5060408301516040830152606083015161308960608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401518184015250610140808401516130de8285018215159052565b5050610160808401516130f382850182613016565b50506101808084015161310882850182613016565b50506101a08084015161311d82850182613016565b505092915050565b8082028115828204841417612ffa57612ffa612ce5565b60008261315957634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612ffa57612ffa612ce5565b60006020828403121561318357600080fd5b8135611a2781612d7d565b6000602082840312156131a057600080fd5b8135611a2781612dd9565b60005b838110156131c65781810151838201526020016131ae565b50506000910152565b600082516131e18184602087016131ab565b9190910192915050565b6000602082840312156131fd57600080fd5b8151611a2781612d7d565b60208152600082518060208401526132278160408501602087016131ab565b601f01601f1916919091016040019291505056fea2646970667358221220644e932a1966be5ea603edf3a7fc1d1cd928c8c3328e8d2a9f2317fc206e3a1864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c806392f14f681161008a578063cb8ac71c11610059578063cb8ac71c1461031b578063e5ac38851461032e578063eed88b8d14610341578063f2fde38b146103615761017e565b806392f14f6814610288578063a3d5b255146102a8578063affa8817146102c8578063c872c725146102fb5761017e565b8063299b8202116100c6578063299b8202146102175780633e6f79f41461022a578063715018a61461023d5780638da5cb5b146102525761017e565b80630388ecdc146101975780631d875353146101b75780631e7451d2146101d757806328ec1fa6146101f75761017e565b3661017e57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061015e5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561017c576040516379f0ddd560e01b815260040160405180910390fd5b005b604051630deab4c360e41b815260040160405180910390fd5b3480156101a357600080fd5b5061017c6101b2366004612a72565b610381565b3480156101c357600080fd5b5061017c6101d2366004612a72565b61050e565b3480156101e357600080fd5b5061017c6101f2366004612ab4565b61068b565b34801561020357600080fd5b5061017c610212366004612ab4565b6107e3565b61017c610225366004612acd565b61092d565b61017c610238366004612aef565b610ae0565b34801561024957600080fd5b5061017c610c4c565b34801561025e57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b34801561029457600080fd5b5061017c6102a3366004612a72565b610c60565b3480156102b457600080fd5b5061017c6102c3366004612b1d565b610ddd565b3480156102d457600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061026c565b34801561030757600080fd5b5061017c610316366004612ab4565b610dfe565b61017c610329366004612b5e565b610f48565b61017c61033c366004612bd4565b610f7a565b34801561034d57600080fd5b5061017c61035c366004612c40565b610fd4565b34801561036d57600080fd5b5061017c61037c366004612c6c565b610fe6565b610389611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190612cb2565b905060005b838110156104fe576104ee8585838181106104e0576104e0612ccf565b9050602002013584846110ba565b6104f781612cfb565b90506104c3565b50505061050a60018055565b5050565b610516611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b9190612cb2565b905060005b838110156104fe5761067b85858381811061066d5761066d612ccf565b905060200201358484611407565b61068481612cfb565b9050610650565b610693611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190612cb2565b90506107d583838361167e565b50506107e060018055565b50565b6107eb611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190612cb2565b90506107d5838383611407565b610935611061565b60405163894e9a0d60e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa15801561099e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c29190612eb7565b90506000806109d18385611804565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b50506040516350e5099f60e11b815260048101899052602481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316935063a1ca133e92508491506044016000604051808303818588803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b50505050506104fe8183610adb9190612fe7565b611934565b610ae8611061565b6000610afa6080830160608401612c6c565b6001600160a01b031614610b2157604051630f58058360e11b815260040160405180910390fd5b6000610b2c8261194a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083604001356040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b8d57600080fd5b505af1158015610ba1573d6000803e3d6000fd5b50505050506000610bb183611a2e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b501d9783836040518363ffffffff1660e01b8152600401610c009190613038565b6000604051808303818588803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b5050505050610c3b83611b8c565b6107d5610adb836040860135612fe7565b610c54611dab565b610c5e6000611e05565b565b610c68611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d9190612cb2565b905060005b838110156104fe57610dcd858583818110610dbf57610dbf612ccf565b90506020020135848461167e565b610dd681612cfb565b9050610da2565b610de5611dab565b610df96001600160a01b0384168383611e55565b505050565b610e06611061565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190612cb2565b90506107d58383836110ba565b610f50611061565b600080610f5d8484611ea7565b9092509050610f6f610adb8284612fe7565b505061050a60018055565b610f82611061565b828114610fa25760405163512509d360e11b815260040160405180910390fd5b600080610fb186868686612337565b9092509050610fc3610adb8284612fe7565b5050610fce60018055565b50505050565b610fdc611dab565b61050a8282612697565b610fee611dab565b6001600160a01b0381166110585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6107e081611e05565b6002600154036110b35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161104f565b6002600155565b60405163894e9a0d60e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190612eb7565b6020810151604051631b2b776160e11b81529192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691633656eec2916111b09189916004019182526001600160a01b0316602082015260400190565b602060405180830381865afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633656eec28785604001516040518363ffffffff1660e01b81526004016112599291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190612c89565b604051631d1b7b7760e01b8152600481018890529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631d1b7b7790602401600060405180830381600087803b1580156112ff57600080fd5b505af1158015611313573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d82846113529190612fe7565b6040518263ffffffff1660e01b815260040161137091815260200190565b600060405180830381600087803b15801561138a57600080fd5b505af115801561139e573d6000803e3d6000fd5b5050505060008211156113b9576113b9836020015183612697565b80156113ff5760006127106113ce8784613125565b6113d8919061313c565b90506113f3846040015182846113ee919061315e565b612697565b6113fd8582612697565b505b505050505050565b60405163894e9a0d60e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190612eb7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633656eec28684604001516040518363ffffffff1660e01b81526004016114fc9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d9190612c89565b60405163074b2fe960e31b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633a597f48906024015b600060405180830381600087803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b5050505060008111156116775760006127106115d38684613125565b6115dd919061313c565b604051632e1a7d4d60e01b8152600481018490529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561164257600080fd5b505af1158015611656573d6000803e3d6000fd5b505050604084015161166d91506113ee838561315e565b6113ff8482612697565b5050505050565b60405163894e9a0d60e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063894e9a0d9060240161034060405180830381865afa1580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b9190612eb7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633656eec28684604001516040518363ffffffff1660e01b81526004016117739291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190612c89565b60405163746ff13d60e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063746ff13d90602401611589565b60008060008460c0015184611819919061315e565b905060008560e001518261182d919061313c565b9050818660e00151826118409190613125565b1461185e57604051635f5ab34960e01b815260040160405180910390fd5b61010086015161186e9082613125565b9350856101a001511561192b5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ff9190612c89565b905086610180015183611912919061313c565b61191d906001612fe7565b6119279082613125565b9350505b50509250929050565b803411156107e0576107e0336113ee833461315e565b600061195e61016083016101408401613171565b61196a57506000919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee9190612c89565b9050610120830135611a08608085013560a086013561315e565b611a12919061313c565b611a1d906001612fe7565b611a279082613125565b9392505050565b611a3661298a565b604080516101c0810190915280611a506020850185612c6c565b6001600160a01b03168152602001836020016020810190611a719190612c6c565b6001600160a01b03168152602001836040013581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001836080013581526020018360a0013581526020018360c0013581526020018360e0013581526020018361010001358152602001836101200135815260200183610140016020810190611b0a9190613171565b15158152602001611b236101808501610160860161318e565b6003811115611b3457611b34613000565b8152602001611b4b6101a08501610180860161318e565b6003811115611b5c57611b5c613000565b8152602001611b736101c085016101a0860161318e565b6003811115611b8457611b84613000565b905292915050565b4281610100013511158015611ba5575060008160e00135115b156107e0576040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a2e40c4490602401602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdf9190612cb2565b90506000612710611cf48460e0870135613125565b611cfe919061313c565b604051632e1a7d4d60e01b815260e086013560048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611d6657600080fd5b505af1158015611d7a573d6000803e3d6000fd5b50611da19250611d939150506040860160208701612c6c565b6113ee8360e088013561315e565b610fce8282612697565b6000546001600160a01b03163314610c5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161104f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610df9908490612725565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2e9190612c89565b6040516328b9031160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a2e40c4490602401602060405180830381865afa158015611fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fde9190612c89565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612040573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120649190612cb2565b905060005b8681101561232c573688888381811061208457612084612ccf565b6101c002919091019150600090506120a26080830160608401612c6c565b6001600160a01b0316146120c957604051630f58058360e11b815260040160405180910390fd5b60006120dd61016083016101408401613171565b15612128576101208201356120fa608084013560a085013561315e565b612104919061313c565b61210f906001612fe7565b6121199087613125565b90506121258188612fe7565b96505b612136604083013589612fe7565b97507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083604001356040518263ffffffff1660e01b81526004016000604051808303818588803b15801561219757600080fd5b505af11580156121ab573d6000803e3d6000fd5b505050505060006121bb83611a2e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b501d9783836040518363ffffffff1660e01b815260040161220a9190613038565b6000604051808303818588803b15801561222357600080fd5b505af1158015612237573d6000803e3d6000fd5b50505050504283610100013511158015612255575060008360e00135115b1561231857600061271061226d8860e0870135613125565b612277919061313c565b604051632e1a7d4d60e01b815260e086013560048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b5061230c9250611d939150506040860160208701612c6c565b6123168682612697565b505b5050508061232590612cfb565b9050612069565b505050509250929050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663855f1a8c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561239a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123be9190612c89565b905060005b8681101561268c5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663894e9a0d8a8a8581811061240e5761240e612ccf565b905060200201356040518263ffffffff1660e01b815260040161243391815260200190565b61034060405180830381865afa158015612451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124759190612eb7565b905060008160c0015188888581811061249057612490612ccf565b905060200201356124a1919061315e565b905060008260e00151826124b5919061313c565b9050818360e00151826124c89190613125565b146124e657604051635f5ab34960e01b815260040160405180910390fd5b6000836101000151826124f99190613125565b90506125058189612fe7565b97506000846101a001511561254857610180850151612524908561313c565b61252f906001612fe7565b6125399088613125565b90506125458189612fe7565b97505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156125a357600080fd5b505af11580156125b7573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a1ca133e828f8f8a8181106125fe576125fe612ccf565b905060200201358e8e8b81811061261757612617612ccf565b905060200201356040518463ffffffff1660e01b8152600401612644929190918252602082015260400190565b6000604051808303818588803b15801561265d57600080fd5b505af1158015612671573d6000803e3d6000fd5b505050505050505050508061268590612cfb565b90506123c3565b505094509492505050565b604080516000808252602082019092526001600160a01b0384169083906040516126c191906131cf565b60006040518083038185875af1925050503d80600081146126fe576040519150601f19603f3d011682016040523d82523d6000602084013e612703565b606091505b5050905080610df9576040516312171d8360e31b815260040160405180910390fd5b600061277a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127fa9092919063ffffffff16565b905080516000148061279b57508080602001905181019061279b91906131eb565b610df95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161104f565b60606128098484600085612811565b949350505050565b6060824710156128725760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161104f565b600080866001600160a01b0316858760405161288e91906131cf565b60006040518083038185875af1925050503d80600081146128cb576040519150601f19603f3d011682016040523d82523d6000602084013e6128d0565b606091505b50915091506128e1878383876128ec565b979650505050505050565b6060831561295b578251600003612954576001600160a01b0385163b6129545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161104f565b5081612809565b61280983838151156129705781518083602001fd5b8060405162461bcd60e51b815260040161104f9190613208565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006003811115612a1357612a13613000565b8152602001600081526020016000905290565b60008083601f840112612a3857600080fd5b50813567ffffffffffffffff811115612a5057600080fd5b6020830191508360208260051b8501011115612a6b57600080fd5b9250929050565b60008060208385031215612a8557600080fd5b823567ffffffffffffffff811115612a9c57600080fd5b612aa885828601612a26565b90969095509350505050565b600060208284031215612ac657600080fd5b5035919050565b60008060408385031215612ae057600080fd5b50508035926020909101359150565b60006101c08284031215612b0257600080fd5b50919050565b6001600160a01b03811681146107e057600080fd5b600080600060608486031215612b3257600080fd5b8335612b3d81612b08565b92506020840135612b4d81612b08565b929592945050506040919091013590565b60008060208385031215612b7157600080fd5b823567ffffffffffffffff80821115612b8957600080fd5b818501915085601f830112612b9d57600080fd5b813581811115612bac57600080fd5b8660206101c083028501011115612bc257600080fd5b60209290920196919550909350505050565b60008060008060408587031215612bea57600080fd5b843567ffffffffffffffff80821115612c0257600080fd5b612c0e88838901612a26565b90965094506020870135915080821115612c2757600080fd5b50612c3487828801612a26565b95989497509550505050565b60008060408385031215612c5357600080fd5b8235612c5e81612b08565b946020939093013593505050565b600060208284031215612c7e57600080fd5b8135611a2781612b08565b600060208284031215612c9b57600080fd5b5051919050565b8051612cad81612b08565b919050565b600060208284031215612cc457600080fd5b8151611a2781612b08565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d0d57612d0d612ce5565b5060010190565b6040516060810167ffffffffffffffff81118282101715612d4557634e487b7160e01b600052604160045260246000fd5b60405290565b604051610260810167ffffffffffffffff81118282101715612d4557634e487b7160e01b600052604160045260246000fd5b80151581146107e057600080fd5b8051612cad81612d7d565b600060608284031215612da857600080fd5b612db0612d14565b905081518152602082015160208201526040820151612dce81612d7d565b604082015292915050565b600481106107e057600080fd5b600060608284031215612df857600080fd5b612e00612d14565b90508151612e0d81612dd9565b81526020820151612e1d81612dd9565b60208201526040820151612dce81612dd9565b600060808284031215612e4257600080fd5b6040516080810181811067ffffffffffffffff82111715612e7357634e487b7160e01b600052604160045260246000fd5b806040525080915082518152602083015160208201526040830151612e9781612b08565b60408201526060830151612eaa81612d7d565b6060919091015292915050565b60006103408284031215612eca57600080fd5b612ed2612d4b565b612edb83612ca2565b8152612ee960208401612ca2565b6020820152612efa60408401612ca2565b604082015260608301516060820152612f1560808401612ca2565b608082015260a0838101519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a0612f7d818501612d8b565b908201526101c0612f8f848201612d8b565b908201526101e0612fa1848201612d8b565b90820152610200612fb485858301612d96565b90820152612fc6846102608501612de6565b610220820152612fda846102c08501612e30565b6102408201529392505050565b80820180821115612ffa57612ffa612ce5565b92915050565b634e487b7160e01b600052602160045260246000fd5b6004811061303457634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526101c08101602083015161306460208401826001600160a01b03169052565b5060408301516040830152606083015161308960608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401518184015250610140808401516130de8285018215159052565b5050610160808401516130f382850182613016565b50506101808084015161310882850182613016565b50506101a08084015161311d82850182613016565b505092915050565b8082028115828204841417612ffa57612ffa612ce5565b60008261315957634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612ffa57612ffa612ce5565b60006020828403121561318357600080fd5b8135611a2781612d7d565b6000602082840312156131a057600080fd5b8135611a2781612dd9565b60005b838110156131c65781810151838201526020016131ae565b50506000910152565b600082516131e18184602087016131ab565b9190910192915050565b6000602082840312156131fd57600080fd5b8151611a2781612d7d565b60208152600082518060208401526132278160408501602087016131ab565b601f01601f1916919091016040019291505056fea2646970667358221220644e932a1966be5ea603edf3a7fc1d1cd928c8c3328e8d2a9f2317fc206e3a1864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ETHStreamInterface.sol:ETHStreamInterface",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 148,
        "contract": "contracts/ETHStreamInterface.sol:ETHStreamInterface",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
